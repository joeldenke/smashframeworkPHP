<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Profile;

	use  Smash\Core,
		Smash\Error,
		Smash\Library,
		Smash\Storage\Filestream;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Profile
	 * @uses         Smash\Core,  Smash\Error,  Smash\Library,  Smash\Storage\Filestream
	 * @interfaces   Smash\Profile\Surface
	 * @package      Filelog
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Filelog implements Surface
	{
		private $options = array(
			'fileExtension' => 'log',
			'dateFormat'    => 'Y-m-d H:i:s P',
			'logFormat'     => ':priority - [:date] --- :class - <:message> in :file on line :line'
		);
		private $path;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (required)
		 * @param    $options (Array)
		 */
		public function __construct($path, array $options = array())
		{
			if (Core::exists($path)) {
				$this->path = Core::cleanPath($path);
			} else {
				throw Core::error('observer.log-path-not-exists');
			}

			if (!empty($options)) {
				$this->setOptions($options);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (Array, required)
		 */
		public function setOptions(array $options)
		{
			foreach ($options as $key => $value) {
				if (array_key_exists($key, $this->options)) {
					$this->options[$key] = $value;
				} else {
					continue;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOptions()
		{
			return $this->options;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 */
		public function getOption($option)
		{
			if (array_key_exists($option, $this->options)) {
				return $this->options[$option];
			} else {
				throw Core::error('Option does not exist: %options', array('option' => $option));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 */
		private function generatePath()
		{
			return $this->path . date('Y-m-d');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $class (required)
		 */
		private function generateFilename($class)
		{
			return md5($class) .'.'. $this->getOption('fileExtension');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $class (required)
		 * @param    $message (required)
		 * @param    $priority (required)
		 */
		private function formatLine($class, $message, $priority)
		{
			$data    = array(
				'class'    => $class,
				'date'     => date($this->getOption('dateFormat')),
				'message'  => $message,
				'priority' => $priority,
				'file'     => 'unknown',
				'line'     => '??'
			);
			$line  = $this->getOption('logFormat');

			if ($class instanceof \Exception) {
				$data['file'] = Error::trimFilePath($class->getFile(), array('smash' => Core::getBase()));
				$data['line'] = $class->getLine();
			}

			foreach ($data as $key => $value) {
				if (strpos($line, ":$key") !== false) {
 					if (is_string($value) || is_numeric($value)) {
						$value = (string) $value;
					} else if (is_array($value)) {
						$value = implode(', ', $value);
					} else if (is_object($value)) {
						$value = get_class($value);
					} else {
						$value = null;
					}

					$line = str_replace(":$key", $value, $line);
				}
			}

			return $line;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $class (required)
		 * @param    $message (required)
		 * @param    $priority (required)
		 */
		public function update($class, $message, $priority)
		{
			Core::setOption('notify', false);

			$stream = Library::factory('storage.filestream');
			$dir    = Library::factory('storage.directory');

			$path   = $this->generatePath();
			$name   = $this->generateFileName($class);
			$file   = $path . Core::DS . $name;
			$line   = $this->formatLine($class, $message, $priority);

			try {
				if (!Core::exists($path)) {
					$dir->createDir($path);
				}

				if (Core::exists($file)) {
					$size = $stream->writeLine($file, $line, Filesream::MODE_APPEND);
				} else {
					$size = $stream->writeLine($file, $line, Filestream::MODE_WRITE);
				}

				Core::setOption('notify', true);
			} catch (\Exception $e) {
				return false;
			}
		}
	}
?>