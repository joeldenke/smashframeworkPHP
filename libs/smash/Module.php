<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;

	use Smash\Storage\Config;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @uses        Smash\Storage\Config
	 * @package     Module
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Module
	{
		private $configFile;
		private $config;
		private $loaded  = false;
		private $options = array(
			'base'         => null,
			'language'     => 'en_US',
			'encoding'     => 'utf-8',
			'environment'  => 'production',
			'errorHandler' => true,
			'errorRoute'   => array('error', 'error'),
			'router'       => 'default',
			'paths'        => array(
				'log'        => ':base-log-:file',
				'tmp'        => ':base-tmp-:file',
				'config'     => ':base-config-:default.:suffix',
				'translate'  => ':base-i18n-:language-:locale.:suffix',
				'template'   => ':base-views-pages-:default.:suffix',
				'layout'     => ':base-views-layouts-:layout.:suffix',
				'controller' => ':base-controllers-:controller',
				'model'      => ':base-models-:default.:suffix',
				'media'      => ':base-media-:type-:file.:suffix'
			)
		);
		private $modkeys = array('module.%name', 'resources', 'plugins', 'bootstrap');

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $config (required)
		 */
		public function __construct($name, $config)
		{
			$config = $this->setConfig($config);
			$this->boot($name, $config);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $config (Smash\Storage\Config Object, required)
		 */
		public function boot($name, Config $config)
		{
			foreach ($this->modkeys as $key) {
				switch ($key) {
					case 'module.%name' :
						$key = str_replace('%name', $name, $key);

						if (!$config->exists(array($key, 'base'))) {
							$config->$key->base = Core::$apps . $name;
						}

						$this->setOptions($config->$key->asArray());
						break;
					case 'bootstrap' :
						if ($config->exists($key)) {
							$this->bootstrap($config->$key);
						}
						break;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (Smash\Storage\Config Object, required)
		 */
		public function bootstrap(Config $config)
		{
			// Implement later on for some bootstrap awesomeness :P
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (Array, required)
		 */
		public function setOptions(array $options)
		{
			foreach ($options as $option => $value) {
				switch ($option) {
					case 'paths'  :
						$this->setPathModels($value);
						break;
					case 'errorRoute' :
						$parts = explode('.', $value);

						if (count($parts) >= 2) {
							$this->setOption($option, $parts);
						}
						break;
					case 'base' :
						$this->setOption($option, rtrim(Core::cleanPath($value), Core::DS));
						break;
					default :
						$this->setOption($option, $value);
						break;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 * @param    $value (required)
		 */
		public function setOption($option, $value)
		{
			if (array_key_exists($option, $this->options)) {
				$this->options[$option] = $value;
			} else {
				throw Core::error('module.option-not-exist', array('option' => $option), Error::CODE_CORE);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOptions()
		{
			return $this->options;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 */
		public function getOption($option)
		{
			if (array_key_exists($option, $this->options)) {
				return $this->options[$option];
			} else {
				throw Core::error('module.option-not-exist', array('option' => $option), Error::CODE_CORE);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $models (Array, required)
		 */
		public function setPathModels(array $models)
		{
			foreach ($models as $key => $model) {
				if (isset($this->options['paths'][$key])) {
					$this->options[$key] = $this->getPathModel($model);
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (required)
		 */
		public function getPathModel($model)
		{
			if (isset($this->options['paths'][$model])) {
				if (is_string($this->options['paths'][$model])) {
					$path = $this->options['paths'][$model];
					$this->options['paths'][$model] = Library::factory('serialize.assembler', $path);
					return $this->options['paths'][$model];
				} else {
					return $this->options['paths'][$model];
				}
			} else {
				throw Core::error('module.invalid-path-model', array('model' => $model), Error::CODE_CORE);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $type (optional)
		 * @param    $data (Array)
		 */
		public function getPath($type = null, array $data = array())
		{
			if (!empty($type) && array_key_exists($type, $this->options['paths'])) {
				if (!empty($data)) {
					foreach (array('base', 'language', 'encoding') as $option) {
						if (!isset($data[$option])) {
							$data[$option] = $this->getOption($option);
						}
					}

					$model = $this->getPathModel($type);
					return $model->assemble($data);
				}
			} else {
				return $this->getOption('base');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function run()
		{
			if (!$this->loaded) {
				$resource   = Library::factory('mvc.controller.resource', $this);
				$controller = Library::factory('mvc.controller', $this, $resource);
				
				// Error\Handler::setReporting();
				
				if ($this->getOption('errorHandler')) {
					Error\Handler::setErrorHandler();
				}

				/*
				if (preg_match('#.(\w+)$#', $path, $match)) {
					$output = ';';
					$resource->setResource();
				}*/

				try {
					$result = $controller->run();
				} catch (Error $e1) {
					try {
						$controller->setError($e1);
						$result = $controller->run($this->getOption('errorRoute'));
					} catch (Error $e2) {
						$result = $e1;
					}
				}

				if ($resource->isResource($result)) {
					$resource->addResource($result);
				}

				$resource->sendResponse(true);
			}

			$this->loaded = true;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $enable (optional)
		 */
		public function loaded($enable = null)
		{
			if (is_bool($enable)) {
				$this->loaded = $enable;
			} else {
				return $this->loaded;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, public
		 * @param    $config (required)
		 */
		final public function setConfig($config)
		{
			if ($config instanceof Config) {
				$this->config = $config;
			} else if (is_array($config)) {
				$this->config = Library::factory('storage.config', $config);
			} else if (is_readable($config)) {
				$hydrator = Library::factory('storage.config.hydrator', array('addAttributes' => false, 'skipRoot' => true));
				$this->config     = $hydrator->read($config);
				$this->configFile = $config;
			} else {
				throw Core::error('config.data-invalid', array('data' => $config), Error::CODE_CORE);
			}

			return $this->config;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getConfigFile()
		{
			if (empty($this->configFile)) {
				return 'unknown config file';
			} else {
				return $this->configFile;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getConfig()
		{
			return ($this->config instanceof Config) ? $this->config : false;
		}
	}
?>