<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Serialize\Query\Ast;
	use   Smash\Core,
		Smash\Serialize\Query\Ast,
		Smash\Serialize\Query\Lexer;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Serialize\Query\Ast
	 * @uses        Smash\Core,  Smash\Serialize\Query\Ast,  Smash\Serialize\Query\Lexer
	 * @extends     Smash\Serialize\Query\Ast
	 * @package     Insert
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Insert extends Ast
	{
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function parse()
		{
			$this->parsed['ast'] = $this->match(Lexer::T_INSERT);
			$parts = $this->lexer->loopFetchUntil(Lexer::T_IDENTIFIER);
			$this->parsed['command'] = array_pop($parts);

			if (!empty($parts)) {
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $lexer (Smash\Serialize\Query\Lexer Object, required)
				 * @param    $driver (Smash\Mvc\Model\Driver\Surface Object, required)
				 */
				$this->parsed['priority'] = implode(' ', $parts);
			}

			$this->parsed['tablename'] = $this->lexer->getToken('data');
			$parts = $this->lexer->loopFetchUntil(Lexer::T_DATA);
			$data = $this->lexer->getToken('data');
			$this->parsed['columns'] = $this->parseSpecial(Lexer::T_DATA, $data);
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $special (required)
 * @param    $value (required)
 * @param    $change (required)
 */

			if (!empty($parts)) {
				$this->parsed['extra'] = $parts;
			}

			$parts = $this->lexer->loopFetchUntil(Lexer::T_DATA);
			$this->parsed['operand'] = $parts[0];

			$data = $this->lexer->getToken('data');
			$this->parsed['values'] = $this->parseSpecial(Lexer::T_DATA, $data);

			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $changes (Array, required)
			 * @param    $parse (Array, required)
			 */
			return $this->parsed;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function compile()
		{
			$compiled = array($this->parsed['ast']);

			if (isset($this->parsed['priority'])) {
				$compiled[] = $this->parsed['priority'];
			}

			$compiled[] = $this->parsed['command'];

			$compiled[] = $this->driver->quoteIdentify($this->parsed['tablename']);
			$compiled[] = '('. implode(', ', $this->parsed['columns']) . ')';

			if (isset($this->parsed['extra'])) {
				$compiled[] = implode(' ', $this->parsed['extra']);
			}

			$compiled[] = $this->parsed['operand'];
			$values = array_map(array($this->driver, 'quote'), $this->parsed['values']);
			$compiled[] = '('. implode(', ', $values) . ')';

			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $changes (Array, required)
			 */
			return implode(' ', $compiled);
		}
	}
?>