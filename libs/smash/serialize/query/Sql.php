<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Serialize\Query;

	use	Smash\Core,
		Smash\Library,
		Smash\Inflector,
		Smash\Mvc\Model\Driver\Surface as Driver;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Serialize\Query
	 * @uses         Smash\Core,  Smash\Library,  Smash\Inflector,  Smash\Mvc\Model\Driver\Surface as Driver
	 * @interfaces   Smash\Serialize\Query\Surface
	 * @package      Sql
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Sql implements Surface
	{
		public static $commands     = array('alter', 'create', 'drop', 'select', 'delete', 'insert', 'truncate', 'update', 'set');
		public static $operators    = array('=', '<>', '<', '<=', '>', '>=', 'like', 'clike', 'slike', 'not', 'is', 'in', 'between');
		public static $types        = array('character', 'char', 'varchar', 'nchar', 'bit', 'numeric', 'decimal', 'dec', 'integer', 'int', 'smallint', 'float', 'real', 'double',
											'date', 'datetime', 'time', 'timestamp', 'interval', 'bool', 'boolean', 'enum', 'text');
		public static $conjunctions = array('by', 'as', 'on', 'into', 'from', 'where', 'with', 'limit', 'order');
		public static $functions    = array('avg', 'count', 'max', 'min', 'sum', 'nextval', 'currval', 'concat');
		public static $reserved     = array('absolute', 'action', 'add', 'all', 'allocate', 'and', 'any', 'are', 'asc', 'ascending', 'assertion', 'at', 'authorization', 'begin',
			'bit_length', 'both', 'cascade', 'cascaded', 'case', 'cast', 'catalog', 'char_length', 'character_length', 'check', 'close', 'coalesce', 'collate', 'collation',
			'column', 'commit', 'connect', 'connection', 'constraint', 'constraints', 'continue', 'convert', 'corresponding', 'cross', 'current', 'current_date', 'current_time',
			'current_timestamp', 'current_user', 'cursor', 'day', 'database', 'deallocate', 'declare', 'default', 'deferrable', 'deferred', 'desc', 'descending', 'describe', 'descriptor',
			'diagnostics', 'disconnect', 'distinct', 'domain', 'else', 'end', 'end-exec', 'escape', 'except', 'exception', 'exec', 'execute', 'exists', 'external', 'extract',
			'false', 'fetch', 'first', 'for', 'foreign', 'found', 'full', 'get', 'global', 'go', 'goto', 'grant', 'group', 'having', 'hour', 'identity', 'immediate', 'index', 'indicator',
			'initially', 'inner', 'input', 'insensitive', 'intersect', 'isolation', 'join', 'key', 'language', 'last', 'leading', 'left', 'level', 'limit', 'local', 'lower', 'match',
			'minute', 'module', 'month', 'names', 'national', 'natural', 'next', 'no', 'null', 'nullif', 'octet_length', 'of', 'only', 'open', 'option', 'or', 'order', 'outer', 'output',
			'overlaps', 'pad', 'partial', 'position', 'precision', 'prepare', 'preserve', 'primary', 'prior', 'privileges', 'procedure', 'public', 'read', 'references', 'relative', 'restrict',
			'revoke', 'right', 'rollback', 'rows', 'schema', 'scroll', 'second', 'section', 'session', 'session_user', 'size', 'some', 'space', 'sql', 'sql_mode', 'sqlcode', 'sqlerror', 'sqlstate',
			'substring', 'system_user', 'table', 'temporary', 'then', 'timezone_hour', 'timezone_minute', 'to', 'trailing', 'transaction', 'translate', 'translation', 'trim', 'true',
			'union', 'unique', 'unknown', 'upper', 'usage', 'user', 'using', 'value', 'values', 'varying', 'view', 'when', 'whenever', 'work', 'write', 'year', 'zone', 'eoc');

		private $driver;
		private $queries      = array();
		private $node         = array(
			'create' => array(
				'table' => array('tablename' => array('data' => false)),
				'view',
				'sequence',
				'schema',
				'user'
			),
			'drop' => array(
				'table',
				'view',
				'sequence',
				'schema',
				'user'
			),
			'alter' => array(
				'table',
				'user'
			),
			'set' => array('reserved' => array('=' => array('value' => false, 'string' => false))),
			'describe',
			'show',
			'insert' => array('into' => array('tablename' => array('data' => array('reserved' => array('data'))))),
			'update',
			'delete',
			'select',
			'commit',
			'rollback',
			'grant',
			'revoke',
			'shutdown',
		);

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (Smash\Mvc\Model\Driver\Surface Object, required)
		 */
		public function __construct(Driver $driver)
		{
			$this->driver = $driver;
			$this->lexer = Library::factory('serialize.query.lexer');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (required)
		 */
		public function import($data)
		{
			if (is_file($data)) {
				$source = file_get_contents($data);
			} else if (is_string($data)) {
				$source = $data;
			} else {
				throw Core::error('Invalid SQL import type', array('data' => $data));
			}

			$source   = str_replace(array("\r", "\n"), ':EOF', $source);
			$source   = str_replace(':EOF:EOF',':EOF',$source);
			$sqlArray = explode(':EOF', $source);

			foreach ($sqlArray as $key => $stmt) {
				if (!$this->isComment($stmt)) {
					$sqlArray[$key] = ltrim(preg_replace('/[\\s]{2,}/', ' ', $stmt));
				} else {
					unset($sqlArray[$key]);
				}
			}

			$sql        = implode(':EOF', $sqlArray);
			$statements = explode(';:EOF', $sql);

			foreach ($statements as $stmt) {
				$stmt = str_replace(',:EOF', ', ', $stmt);
				$stmt = str_replace(':EOF', ' ', $stmt);
				$stmt = trim($stmt);

				if ($stmt != '') {
					$this->queries[] = $this->getAst($stmt);
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $text (required)
		 */
		public function isComment($text)
		{
			if (!empty($text)) {
				$fL = $text[0];
				$sL = $text[1];

				switch ($fL) {
					case "#":
						return true;
						break;
					case "/":
						if ($sL == "*")
							return true;
						break;
					case "-":
						if ($sL == "-")
							return true;
						break;
				}
			}

			return false;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getQueries()
		{
			return $this->queries;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $query (required)
		 */
		public function getAst($query)
		{
			$this->lexer->tokenize($query);

			$ast = $this->lexer->current();
			$ast = strtolower($ast->data);

			if (is_readable(dirname(__FILE__) . Inflector::classyfile('-ast-'. $ast))) {
				$ast = Library::factory('serialize.query.ast.'. strtolower($ast), $this->lexer, $this->driver);
				$ast->setQuery($query);

				if ($ast instanceof Ast) {
					return $ast;
				} else {
					throw Core::error('AST Class %class need to be an instance of %abstract', array('class' => $ast, 'abstract' => __NAMESPACE__ .'\\Ast'));
				}
			} else {
				throw Core::error('Cannot parse this kind of SQL syntax', array('ast' => $ast, 'query' => $query));
			}
		}
	}
?>