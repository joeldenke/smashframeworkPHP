<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Serialize;

	use	Smash\Library,
		Smash\Core,
		Smash\Error,
		Smash\Inflector,
		Smash\Mvc\Model,
		Smash\Mvc\Model\Result,
		Smash\Mvc\Model\Driver\Surface as Driver;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Serialize
	 * @uses        Smash\Library,  Smash\Core,  Smash\Error,  Smash\Inflector,  Smash\Mvc\Model,  Smash\Mvc\Model\Result,  Smash\Mvc\Model\Driver\Surface as Driver
	 * @package     Query
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Query
	{
		private $queries = array();
		private $entries = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $adapter (required)
		 */
		public function __construct($adapter)
		{
			$this->setDriver($adapter);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $source (required)
		 */
		public function append($source)
		{
			$ext = null;

			if (is_file($source)) {
				$info  = pathinfo($source);
				$key  = $info['filename'];
				$ext  = strtolower($info['extension']);
			}

			if (is_readable(dirname(__FILE__) . Inflector::classyfile('-query-'. $ext))) {
				$query = Library::factory('serialize.query.sql', $this->driver);
				$query->import($source);
				$this->queries[$key] = $query;
			} else {
				$query = Library::factory('serialize.query.general', $this->driver);
				$query->import($source);
				$this->queries[] = $query;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $source (required)
		 */
		public function import($source)
		{
			if (is_string($source)) {
				if (is_readable($source)) {
					if (is_dir($source)) {
						$iterator = new \DirectoryIterator($source);

						foreach ($iterator as $entry) {
							if ($entry->isFile()) {
								$this->append($entry->getPathname());
							}
						}
					} elseif (is_file($source)) {
						$this->append($source);
					}
				} else {
					$this->append($source);
				}
			} else {
				throw Core::error('serialize.query.invalid-source', array('source' => $source));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $adapter (required)
		 */
		public function setDriver($adapter)
		{			
			if ($adapter instanceof Model) {
				if ($adapter->hasDriver()) {
					$this->driver = $adapter->getDriver();
				} else {
					throw Core::error('mvc.model.valid-driver-required', array('adapter' => $adapter));
				}
			} else if ($adapter instanceof Driver) {
				$this->driver = $adapter;
			} else {
				throw Core::error('mvc.model.invalid-driver-adapter', array('adapter' => $adapter));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $query (required)
		 */
		public function execute($query)
		{
			try {
				$this->driver->begin();
				$result = $this->driver->query($query);
				$this->driver->commit();
				return true;
			} catch (Error $e) {
				$this->driver->rollback();
				throw $e;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $delim (required)
		 * @param    $maps (required)
		 */
		public function map($delim, $maps)
		{
			$result  = array();
			$size   = 0;

			foreach ($maps as $key => $map) {
				if (is_string($map)) {
					$map = explode($delim, $map);
				}

				if (count($map) > $size) {
					$keys = array_keys($map);
					$size  = count($map);
				}

				$maps[$key] = array_values($map);
			}

			for ($i = 0; $i < $size; $i++) {
				$column = array();

				foreach($maps as $k => $v) {
					if (isset($v[$i])) {
						$column[$k] = (is_array($v) ? $v[$i] : $v);
					}
				}

				$result[$keys[$i]] = $column;
			}

			return $result;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $patterns (Array, required)
		 * @param    $parsed (Array, required)
		 */
		public function loopTheLoop(array $patterns, array $parsed)
		{
			foreach ($patterns as $key => $pattern) {
				if (isset($parsed[$key])) {
					if (is_array($pattern)) {
						if (!is_array($parsed[$key])) {
							return false;
						} else {
							return $this->loopTheLoop($pattern, $parsed[$key]);
						}
					} else if (is_string($pattern)) {
						if (!is_string($parsed[$key])) {
							return false;
						} else if (strcasecmp($parsed[$key], $pattern) != 0) {
							return false;
						}
					} else {
						throw Core::error('Invalid type');
					}
				} else {
					return false;
				}
			}

			return true;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $filter (Array, required)
		 * @param    $parsed (Array, required)
		 */
		public function passFilter(array $filter, array $parsed)
		{
			$maps = $this->map('|', $filter);

			foreach ($maps as $map) {
				foreach ($map as $key => $value) {
					if (isset($parsed[$key]) && strcasecmp($parsed[$key], $value) == 0) {
						return $this->loopTheLoop($map, $parsed);
					}
				}
			}

			return false;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $entries (Array, required)
		 * @param    $changes (Array, required)
		 * @param    $filter (Array, required)
		 */
		public function parseCompile(array $entries, array $changes, array $filter)
		{
			$compiled = array();

			foreach ($entries as $ast) {
				$parsed = $ast->getParsed($changes);

				if ($this->passFilter($filter, $parsed)) {
					$compiled[] = array(
						'query' => $ast->compile(),
						'original' => $ast->getQuery(),
						'parsed' => $parsed
					);
				}
			}

			return $compiled;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $changes (Array)
		 * @param    $filter (Array)
		 * @param    $limit (optional)
		 * @param    $execute (optional)
		 */
		public function run(array $changes = array(), array $filter = array(), $limit = 1, $execute = true)
		{
			$count = 1;

			foreach ($this->queries as $key => $entry) {
				$queries = $this->parseCompile($entry->getQueries(), $changes, $filter);

				foreach ($queries as $query) {
					if ($count > $limit) {
						return;
					} else {
						if ($execute) {
							if ($this->execute($query['query'])) {
								$this->entries[$key][] = $query['parsed'];
								$count++;
							}
						} else {
							$this->entries[$key][] = $query['parsed'];
							$count++;
						}
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $token (optional)
		 */
		public function getEntries($token = null)
		{
			$entries = array();

			foreach ($this->entries as $key => $entry) {
				foreach ($entry as $k => $v) {
					if (is_string($token) && isset($v[$token])) {
						$entries[$key] = $v[$token];
					} else if (is_array($token)) {
						foreach ($token as $value) {
							if (array_key_exists($value, $v)) {
								$entries[$key][$k][$value] = $v[$value];
							}
						}
					}
				}
			}

			return $entries;
		}
	}
?>