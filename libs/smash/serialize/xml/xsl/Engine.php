<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Serialize\Xml\Xsl;
	
	use	Smash,
		Smash\Core,
		Smash\Library;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Serialize\Xml\Xsl
	 * @uses        Smash,  Smash\Core,  Smash\Library
	 * @package     Engine
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Engine
	{
		private $xh;

		private $xml      = null;
		private $xhtml    = null;
		private $params   = array();

		private $encoding = 'utf-8';

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __construct()
		{
			$this->xh = Library::factory('XSLTProcessor');

			if (!$this->xh->hasExsltSupport()) {
				throw Core::error('EXSLT support not available');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __destruct()
		{
			unset($this->xh);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function registerPHPFunctions()
		{
			$this->xh->registerPHPFunctions();
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 */
		public function splitName($param)
		{
			if (!strpos($param, ':')) {
				return array(null, $param);
			} else {
				return explode(':', $param);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $value (required)
		 * @param    $local (optional)
		 */
		public function setParam($param, $value, $local = false)
		{
			list($ns, $name) = $this->splitName($param);

			if (!$this->xh->setParameter($ns, $name, $value)) {
				throw Core::error('Failed setting parameter: %parameter', array('parameter' => $param));
			}

			if ($local === true) {
				if (empty($ns)) {
					$this->params[$param] = $value;
				} else {
					$this->params[$ns .':'. $param] = $value;
				}
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 */
		public function getParam($param)
		{
			list($ns, $name) = $this->splitName($param);
			return $this->xh->getParameter($ns, $name);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 */
		public function unsetParam($param)
		{
			list($ns, $name) = $this->splitName($param);
			$this->xh->removeParameter($ns, $name);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clearParams()
		{
			foreach ($this->params as $param => $value) {
				$this->unsetParam($param);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (required)
		 */
		public function setXML($xml)
		{
			$this->xml = $xml;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $encoding (required)
		 */
		public function setEncoding($encoding)
		{
			$this->encoding = $encoding;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $stylesheet (required)
		 */
		public function render($stylesheet)
		{
			$extension = pathinfo($stylesheet, PATHINFO_EXTENSION);

			if (!in_array($extension, array('xsl', 'xslt'))) {
				throw Core::error('File %stylesheet is not a XSL stylesheet', array('stylesheet' => $stylesheet));
			}

			if (!empty($this->params)) {
				foreach ($this->params as $param => $value) {
					$hasParam = $this->getParam($param);

					if (!$hasParam) {
						$this->setParam($param, $value);
					}
				}
			}

			$xsl = new DOMDocument('1.0', $this->encoding);
			$xml = new DOMDocument('1.0', $this->encoding);

			if (!$xsl->load($stylesheet)) {
				throw Core::error('Failed loading XSL stylesheet document');
			}

			if (!$xml->loadXML($this->xml)) {
				throw Core::error('Failed loading XML string to DOM', $this->xml);
			}

			if (!$this->xh->importStylesheet($xsl)) {
				throw Core::error('XSLT processing error: Failed import XSL stylesheet', $xsl->saveXML());
			}

			if (!$this->xhtml = $this->xh->transformToXML($xml)) {
				throw Core::error('XSLT processing error: Failed transforming XSL to XHTML', $xml->saveXML());
			}

			return $this->xhtml;
		}
	}
?>