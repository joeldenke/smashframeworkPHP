<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Serialize;

	use	Smash\Inflector,
		Smash\Library,
		Smash\Serialize\Highlight\Surface as Highlighter,
		Smash\Core;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Serialize
	 * @uses         Smash\Inflector,  Smash\Library,  Smash\Serialize\Highlight\Surface as Highlighter,  Smash\Core
	 * @extends      ArrayIterator
	 * @interfaces   Countable, Serializable, SeekableIterator, ArrayAccess, Traversable, Iterator
	 * @package      Highlight
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Highlight extends \ArrayIterator
	{
		private $replace = array(
			"\r\n"  => "\n",
			"\r"     => "\n",
			" "       => '&#160;',
		);
		private $options = array(
			'blockFormat'   => null,
			'blocks'        => false,
			'linenum'       => false,
			'linebreaks'    => true,
			'highlightLine' => false,
			'tabIndent'     => 4,
			'highlightSize' => 5,
			'startLine'     => 1,
			'endLine'       => 1,
		);

		private $highlighter;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $source (required)
		 * @param    $options (optional)
		 */
		public function __construct($source, $options = null)
		{
			if ($this->hasHighlighter($source)) {
				$this->getHighlighter($source, $options);
			} else {
				$e = Core::error('serialize.highlight.invalid-highlighter', array('highlighter' => $source));
				echo $e;
				throw $e;
			}

			if (is_array($options)) {
				foreach ($options as $option => $value) {
					if (isset($this->options[$option])) {
						$this->options[$option] = $value;
					}
				}
			}

			$size = $this->options['highlightSize'];
			$line = $this->options['highlightLine'];

			if (is_int($size) && is_int($line)) {
				$this->options['startLine'] = $line - $size;
				$this->options['endLine']   = $line + $size + 1;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 */
		public function getOption($option)
		{
			if (array_key_exists($option, $this->options)) {
				return $this->options[$option];
			} else {
				throw Core::error('Option "'. $option .'" is not available');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 * @param    $value (required)
		 * @param    $strict (optional)
		 */
		public function setOption($option, $value, $strict = true)
		{
			if (array_key_exists($option, $this->options)) {
				$this->options[$option] = $value;
			} else {
				if ($strict === true) {
					throw Core::error('Option "'. $option .'" is not available');
				} else {
					return false;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $file (required)
		 */
		static public function hasHighlighter($file)
		{
			$type = pathinfo($file, PATHINFO_EXTENSION);
			$path = dirname(__FILE__) . Inflector::classyfile('-highlight-'. $type);

			return is_readable($path);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $source (optional)
		 * @param    $options (optional)
		 */
		public function getHighlighter($source = null, $options = null)
		{
			if (empty($source)) {
				if ($this->highlighter instanceof Highlighter) {
					return $this->highlighter;
				}
			} else if (is_string($source)) {
				if (is_readable($source)) {
					$type = pathinfo($source, PATHINFO_EXTENSION);
					$source = file_get_contents($source);
				} else {
					$type   = $this->default;
				}

				$instance = Library::factory('serialize.highlight.'. $type, $source, $options);

				if ($instance instanceof Highlighter) {
					$this->highlighter = $instance;
					return $instance;
				} else {
					throw Core::error('serialize.highlight.not-instanceof-interface', 1004, array('source' => $source));
				}
			} else {
				throw Core::error('serialize.highlight.invalid-source', 1004, array('source' => $source));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function toArray()
		{
			$highlight = $this->getHighlighter();
			$lines     = array();

			for ($i = $this->getOption('startLine'); $i < $this->getOption('endLine'); $i++) {
				$line = $highlight->processLine($i);

				if (isset($line[0])) {
					if (is_int($this->options['tabIndent'])) {
						$line[0] = str_replace("\t", str_repeat('&#160;', $this->options['tabIndent']), $line[0]);
					}

					$line[0] = str_replace(array_keys($this->replace), array_values($this->replace), $line[0]);
				}

				if (!$this->getOption('linebreaks')) {
					if (isset($line[count($line) - 1]) && strpos($line[count($line) - 1], "\n")) {
						array_pop($line);
					}
				}

				$lines[$i] = implode($line);
			}

			return $lines;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $return (optional)
		 */
		public function toList($return = false)
		{
			$source = $this->toArray();
			$out = "<ol start='". $this->getOption('startLine') ."'>\n";

			foreach ($source as $i => $line) {
				$out .= "\t<li". ($i == $this->getOption('highlightLine') ? ' selected="selected"' : null) .">";

				if (empty($line)) {
					$out .= '&#160;';
				} elseif ($this->options['blocks'] && in_array($i, $this->plainTextKeys)) {
					$out .= $line;
				} else {
					$out .= "<code>$line</code>";
				}

				$out .= "</li>\n";
			}

			$out .= "</ol>\n";

			if ($return === true) {
				return $out;
			} else {
				echo $out;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $return (optional)
		 */
		public function toHtml($return = false)
		{
			if ($this->options['linenum'] && $this->options['blockFormat'] === null) {
				$this->options['blockFormat'] = '<span>%02d</span> ';
			}

			$source = $this->toArray();
			$out    = "<code>\n";

			foreach ($source as $i => $line) {
				$out .= '    ';

				if ($this->options['linenum']) {
					$out .= sprintf($this->options['blockFormat'], $i);
				}

				$out .= empty($line) ? '&nbsp;' : $line;
				$out .= "<br />\n";
			}

			$out .= "</code>\n";

			if ($return === true) {
				return $out;
			} else {
				echo $out;
			}
		}
	}
?>