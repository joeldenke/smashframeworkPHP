<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Backend;

	use   Smash\Core,
		Smash\Inflector,
		Smash\Library;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Backend
	 * @uses        Smash\Core,  Smash\Inflector,  Smash\Library
	 * @package     Crypto
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Crypto
	{
		static private $instance;

		private $module      = null;
		private $privateKey  = 'smash.backend.crypto';
		private $options     = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $key (required)
		 * @param    $module (optional)
		 * @param    $options (Array)
		 */
		public function __construct($key, $module = null, array $options = array())
		{
			if (!empty($options)) {
				$this->options = $options;
			}

			if (!empty($module)) {
				$this->loadModule($module);
			}

			if (!empty($key)) {
				$this->privateKey = Crypto\Hash::generate('sha256', $key, 'smashCrypto');
			} else {
				$this->privateKey = Crypto\Hash::generate('sha256', $this->privateKey, 'smashCrypto');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function hasModule()
		{
			return ($this->module instanceof Crypto\Surface);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $module (required)
		 */
		public function isModule($module)
		{
			return is_readable(dirname(__FILE__) . Inflector::classyfile('-crypto-'. $module));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $module (required)
		 * @param    $return (optional)
		 */
		public function loadModule($module, $return = false)
		{
			if ($this->hasModule()) {
				return $this->module;
			} else {
				if ($this->isModule($module)) {
					$this->module = Library::factory('backend.crypto.'.$module, $this->privateKey, $this->options);

					if ($return === true) {
						return $this->module;
					}
				} else {
					throw Core::error('Specified crypt module is not valid');
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (required)
		 * @param    $mode (required)
		 */
		public function crypt($data, $mode)
		{
			$module = $this->loadModule('mcrypt', true);

			switch ($mode) {
				case 'encrypt' :
					return $module->encrypt($data);
					break;
				case 'decrypt' :
					return $module->decrypt($data);
					break;
				default :
					throw Smash::error('Invalid cryption mode. It must be either "encrypt" or "decrypt" mode');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $args (required)
		 */
		public function __call($name, $args)
		{
			switch ($name) {
				case 'encrypt' :
				case 'decrypt' :
					return $this->crypt($args[0], $name);
					break;
				default :
					throw Core::error('Invalid method. Available fallback methods are "encrypt" and "decrypt"');
			}
		}

		/*----------------------------------------------------------------------
		* This method creates a random unpronounceable password
		*
		* @access public
		* @param  integer   $length   - Length of the password
		* @param  string    $type     - Type of characters which should be use
		* @param  bool      $caseMode - Case insensitive or not
		* @return string              - Returns the generated random password
		* ------------------------------------------------------------------------------------------------------------- */
		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $length (required)
		 * @param    $type (optional)
		 * @param    $caseMode (optional)
		 */
		static public function randPass($length, $type = null, $caseMode = true)
		{
			$alpha = array_merge(range('a', 'z'), range('A', 'Z'));
			$numbs = range(0, 9);
			$ascii = array(
				'#', '@', '%', '*', '?', '!',
				'-', '_', '.', ':',
				'/', '(', ')', '[', ']'
			);

			switch($type)
			{
				case 'alpha'        :
				case 'alphabetical' :
					$chars = $alpha;
					break;
				case 'num'     :
				case 'numeric' :
					$chars = $numbs;
					break;
				case 'alphanum'     :
				case 'alphanumeric' :
					$chars = array_merge($alpha, $numbs);
					break;
				default :
					$chars = array_merge($alpha, $numbs, $ascii);
					break;
			}

			$password = '';

			for ($i = 0; $i < $length; $i++) {
				$password .= $chars[mt_rand(0, count($chars) - 1)];
			}

			if (is_bool($caseIns)) {
				switch ($caseMode) {
					case true  :
						return $password;
						break;
					case false :
						return strtolower($password);
						break;
				}
			} else {
				return $password;
			}
		}
	}
?>