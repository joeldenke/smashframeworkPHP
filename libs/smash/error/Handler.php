<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Error;

	use 	Smash\Error,
			Smash\Core,
			Smash\Library;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Error
	 * @uses        Smash\Error,  Smash\Core,  Smash\Library
	 * @extends     Smash\Error
	 * @package     Handler
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Handler extends Error
	{
		static protected $oldErrorHandler;
		static protected $oldExceptionHandler;

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 */
		static public function setReporting()
		{
			if (Core::isMode('development')) {
				error_reporting(E_ALL & ~E_STRICT);
				ini_set('display_errors', 1);
			} else {
				error_reporting(0);
				ini_set('display_errors', 0);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $code (required)
		 */
		static public function forwardError($code)
		{
			$res = array();
			$bit = error_reporting();			
			
			while ($bit > 0) {				
				for ($i = 0, $n = 0; $i <= $bit; $i = 1 * pow(2, $n), $n++) {					
					$end = $i;				
				}				
				
				$res[] = $end;				
				$bit = $bit - $end;			
			}
			
			return in_array($code, $res);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $class (optional)
		 * @param    $method (optional)
		 */
		static public function setErrorHandler($class = null, $method = 'errorHandler')
		{
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $error (required)
			 * @param    $data (required)
			 * @param    $code (optional)
			 * @param    $options (optional)
			 */
			if (is_callable(array($class, $method))) {
				self::$oldErrorHandler = set_error_handler(array($class, $method));
			} else {
				self::$oldErrorHandler = set_error_handler(array(__CLASS__, 'errorHandler'));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $code (required)
		 * @param    $error (required)
		 * @param    $file (required)
		 * @param    $line (required)
		 * @param    $context (required)
		 */
		static public function errorHandler($code, $error, $file, $line, $context)
		{			
			if (self::forwardError($code)) {
				throw Library::factory('error.php', $error, $code, $file, $line, $context);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $class (optional)
		 * @param    $method (optional)
		 */
		static public function setExceptionHandler($class = null, $method = 'exceptionHandler')
		{
			if (is_callable(array($class, $method))) {
				self::$oldExceptionHandler = set_exception_handler(array($class, $method));
			} else {
				self::$oldExceptionHandler = set_exception_handler(array(__CLASS__, 'exceptionHandler'));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $data (required)
		 * @param    $count (optional)
		 */
		static public function exceptionHandler(\Exception $e)
		{
			parent::setException($e);
		}
	}
?>