<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;
	use Smash\Core;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @uses        Smash\Core
	 * @package     Inflector
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Inflector
	{
		static private $instance;

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 */
		static public function singleton()
		{
			if (empty(self::$instance)) {
				self::$instance = new self();
			}

			return self::$instance;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $filters (Array, required)
		 * @param    $data (required)
		 */
		static public function filter(array $filters, $data)
		{
			$instance = self::singleton();

			foreach ($filters as $filter) {
				if (is_callable(array($instance, $filter))) {
					$data = call_user_func_array(array($instance, $filter), $data);
				} else {
					throw Core::error('Filter "%filter" does not exist for the Inflector', array('filter' => $filter), 1004);
				}
			}

			return $data;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function camelize($str)
		{
			if (strlen($str) > 0) {
				$str    = str_replace(array('_', '-', Core::DS, '\\'), ' ', $str);
				$str    = ucwords($str);
				$str    = str_replace(' ', '', $str);
				$str[0] = strtolower($str[0]);
			}

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function studly($str)
		{
			if (strlen($str) > 0) {
				$str = self::camelize($str);
				$str = ucfirst($str);
			}

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function classyfile($str)
		{
			$str = str_replace(array('_', '-'), ' ', $str);
			$str = explode(' ', $str);
			$str = array_map('strtolower', $str);
			$str[count($str) - 1] = ucfirst($str[count($str) - 1]);

			return implode(Core::DS, $str) .'.php';
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function classypath($str)
		{
			$str = str_replace(array('_', '-'), ' ', $str);
			$str = explode(' ', $str);
			$str = array_map('strtolower', $str);

			return implode(Core::DS, $str);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function classify($str)
		{
			$str = str_replace(array('/', '-', '\\', '_', '.', '::'), ' ', $str);
			$str = ucwords(strtolower($str));
			$str = str_replace(' ', '\\', $str);

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function pathify($str)
		{
			return str_replace(array('/', '//', '\\', '.', '::'), Core::DS, $str);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function mvcify($str)
		{
			$str = str_replace(array('/', '-', '\\', '_', '.', '::'), ' ', $str);
			$str = ucwords(strtolower($str));
			$str = str_replace(' ', '_', $str);
			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function controlify($str)
		{
			return 'Controller_'. self::mvcify($str);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function modelify($str)
		{
			return 'Model_'. self::mvcify($str);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function dashToUnder($str)
		{
			$str = str_replace('-', ' ', $str);
			$str = ucwords($str);
			$str = str_replace(' ', '_', $str);

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function camelToUnder($str)
		{
			$str = preg_replace('/([a-z])([A-Z])/', '$1 $2', $str);
			$str = str_replace(' ', '_', ucwords($str));

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function underToDash($str)
		{
			$str = str_replace('_', ' ', $str);
			$str = ucwords($str);
			$str = str_replace(' ', '-', $str);

			return $str;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $str (required)
		 */
		static public function camelToDash($str)
		{
			$str = preg_replace('/([a-z])([A-Z])/', '$1 $2', $str);
			$str = str_replace(' ', '-', ucwords($str));

			return strtolower($str);
		}
	}
?>