<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;

	use Smash\Serialize\Surface;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @uses        Smash\Serialize\Surface
	 * @package     Serialize
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Serialize
	{
		private $adapter = null;
		private $data    = null;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __construct()
		{
			$numargs = func_num_args();
			$params  = func_get_args();

			if ($numargs >= 1) {
				$adapter = array_shift($params);
			} else {
				throw Core::error('You must at least specify an adapter as first parameter');
			}

			$this->load($adapter, $params);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function unserialize()
		{
			$numargs = func_num_args();
			$params  = func_get_args();

			if ($numargs < 1) {
				throw Core::error('You must at least specify some kind of data as first parameter');
			}

			if ($this->isAdapter()) {
				$this->data = Library::callMethod($this->adapter, 'unserialize', $params);
				return $this->data;
			} else {
				throw Core::error('We need a valid serializer to unserialize data: "%data"', null, $this, array('data' => $data));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (required)
		 */
		public function serialize($data)
		{
			$numargs = func_num_args();
			$params  = func_get_args();

			if ($numargs < 1) {
				throw Core::error('You must at least specify some kind of data as first parameter');
			}

			if ($this->isAdapter()) {
				$this->data = Library::callMethod($this->adapter, 'serialize', $params);
				return $this->data;
			} else {
				throw Core::error('We need a valid serializer to unserialize data: "%data"', null, $this, array('data' => $data));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $adapter (required)
		 * @param    $params (Array)
		 */
		public function load($adapter, array $params = array())
		{
			if ($this->isValid($adapter)) {
				$file  = Core::classToFile('serialize.'. $adapter);
				$class = Core::filterClassName('smash.serialize.'. $adapter);

				Core::import(array('serialize.interface', $class));

				if (!Core::isDeclared($class)) {
					throw Core::error('Cannot find serialize class %class in file %file', array('class' => $class, 'file' => $file));
				} else {
					$this->adapter = Library::factoryByParams($class, $params);
				}
			} else {
				throw Core::error('Specified serialize adapter "%adapter" is not valid', array('adapter' => $adapter));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isAdapter()
		{
			if ($this->adapter instanceof Surface) {
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getAdapter()
		{
			if ($this->isAdapter()) {
				return $this->adapter;
			} else {
				throw Core::error('No valid serialize adapter is loaded yet', null, $this);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $adapter (required)
		 */
		public function isValid($adapter)
		{
			if (is_string($adapter)) {
				$file = Core::classToFile('serialize.'. $adapter);

				if (Core::exists($file)) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __toString()
		{
			return $this->data;
		}
	}
?>