<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model;

	use	Smash\Core,
		Smash\Inflector,
		Smash\Library,
		Smash\Error,
		Smash\Storage\Config,
		Smash\Storage\Filestream,
		Smash\Serialize\Php,
		Smash\Mvc\Model,
		Smash\Mvc\Model\Driver\Surface as iFace;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\Model
	 * @uses        Smash\Core,  Smash\Inflector,  Smash\Library,  Smash\Error,  Smash\Storage\Config,  Smash\Storage\Filestream,  Smash\Serialize\Php,  Smash\Mvc\Model,  Smash\Mvc\Model\Driver\Surface as iFace
	 * @package     Generator
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Generator
	{
		private $base;
		private $driver;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $adapter (required)
		 * @param    $base (required)
		 */
		public function __construct($adapter, $base)
		{
			if (is_readable($base)) {
				$this->base = Core::cleanPath($base);
			} else {
				throw Core::error('mvc.model.invalid-model-path', array('path' => $base));
			}

			if ($adapter instanceof Model) {
				if ($adapter->hasDriver()) {
					$this->driver = $adapter->getDriver();
				} else {
					throw Core::error('mvc.model.valid-driver-required', array('adapter' => $adapter));
				}
			} else if ($adapter instanceof iFace) {
				$this->driver = $adapter;
			} else {
				throw Core::error('mvc.model.invalid-driver-adapter', array('adapter' => $adapter));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $table (required)
		 */
		private function parseData($table)
		{
			$fields = $this->getFields($table);
			$data   = array('table' => $table);

			foreach ($fields as $field) {
				$name = $field['Field'];
				$data['fields'][] = $name;

				preg_match('/([^\(]+)[\(]?([\d]*)?[\)]?(.+)?/', $field['Type'], $type);
				$rulename = $this->driver->getDataRule(strtolower($type[1]));

				if ($rulename !== false) {
					$data['rules'][$name][] = array($rulename);
				}

				if (isset($type[3]) && !empty($type[3])) {
					if (trim($type[3]) === 'unsigned') {
						$data['rules'][$name][] = array('min', 0);
					}
				}

				if (ctype_digit($type[2])) {
					if ($type[1] == 'varchar' || $type[1] == 'char' || $rulename=='integer') {
						$data['rules'][$name][] = array('maxlength', intval($type[2]));
					}
				}

				if (strtolower($field['Null']) == 'no') {
					$data['rules'][$name][] = array('notnull');
				} else {
					$data['rules'][$name][] = array('optional');
				}

				if ($field['Key'] == 'PRI') {
					$data['primaryKey'] = $name;
				}
			}

			return $data;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $rules (Array, required)
		 */
		public function exportRules(array $rules)
		{
			$rule = preg_replace("/'?\d+'?\s+=>\s+/", '', var_export($rules, true));
			$rule = str_replace("\n      ", ' ', $rule);
			$rule = str_replace(",\n    )", ')', $rule);
			$rule = str_replace("array (", 'array(', $rule);
			$rule = str_replace("    array(", "\t\t\t\tarray(", $rule);
			$rule = str_replace("=> \n  array(", '=> array(', $rule);
			$rule = str_replace("  '", "\t\t\t'", $rule);
			$rule = str_replace("  ),", "\t\t\t),", $rule);
			$rule = str_replace("array( ", "array(", $rule);
			$rule .= ';';
			$rule = str_replace(');', "\t\t);", $rule);

			return $rule;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $path (Array, required)
		 * @param    $data (Array, required)
		 */
		private function compile(array $path, array $data)
		{
			$file              = Library::factory('storage.filestream', $path['file'], Filestream::MODE_WRITE);
			$lines           = array();
			$primaryKey = isset($data['primaryKey']) ? $data['primaryKey'] : 'false';

			$class = Inflector::modelify($path['id']);

			$lines[] = array('<?php');
			$lines[] = array("class $class", 1);
			$lines[] = array('{', 1);
			$lines[] = array('public $table      = '. "'" . $data['table'] ."';", 2);
			$lines[] = array('public $primaryKey = '. "'" . $primaryKey ."';", 2);
			$lines[] = array('public $fields     = ' . self::exportRules($data['fields']), 2);
			$lines[] = array('public $rules      = '. self::exportRules($data['rules']), 2, 1);
			$lines[] = array('}', 1);
			$lines[] = array('?>');

			$file->writeLines($lines);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $key (required)
		 * @param    $overwrite (required)
		 */
		public function getPath($key, $overwrite)
		{
			$folder = Library::factory('storage.directory', $this->base);
			$dir     = $this->base . Core::DS;
			$parts = explode('-', $key);

			while (!empty($parts) && is_readable($dir)) {
				$part = array_shift($parts);

				if (empty($parts)) {
					$file = $dir . $part . '.php';
					if ($overwrite) {
						return array('file' => $file, 'id' => $key);
					} else {
						return file_exists($file) ? false : array('file' => $file, 'id' => $key);
					}
				} else {
					$dir .= strtolower($part) . Core::DS;

					if (!file_exists($dir)) {
						$folder->createDir($dir);
					}
				}
			}

			return false;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $names (Array)
		 * @param    $overwrite (optional)
		 */
		public function generate(array $names = array(), $overwrite = false)
		{
			if (empty($names)) {
				$database = $this->driver->getDSN('database');
				$stm = $this->driver->query('SHOW TABLES');
				$tables = $stm->fetchAll();

				foreach ($tables as $table) {
					if (stristr($_SERVER['SERVER_SOFTWARE'], 'Win32')){
						$names[] = $table['Tables_in_'. strtolower($database)];
					} else {
						$names[] = $table['Tables_in_'. $database];
					}
				}
			}

			foreach ($names as $key => $name) {
				if (is_string($key)) {
					$path  = $this->getPath($key, $overwrite);
				} else {
					$path  = $this->getPath($name, $overwrite);
				}

				if ($path !== false) {
					$data = $this->parseData($name);
					$this->compile($path, $data);
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $table (required)
		 */
		public function getFields($table)
		{
			switch ($this->driver->getDSN('driver')) {
				case 'mysql'  :
				case 'mysqli' :
				default           :
					$stm = $this->driver->prepare('DESCRIBE %s');
					$result = $stm->execute($this->driver->quoteIdentify($table));
					return $result->fetchAll();
					break;
			}
		}
	}
?>