<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model;

	use	Smash\Core,
		Smash\Error,
		Smash\Inflector,
		Smash\Mvc\Model\Driver\Surface as iFace;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\Model
	 * @uses        Smash\Core,  Smash\Error,  Smash\Inflector,  Smash\Mvc\Model\Driver\Surface as iFace
	 * @package     Activerecord
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Activerecord
	{
		private $driver;
		private $table;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (Smash\Mvc\Model\Driver\Surface Object, required)
		 */
		public function __construct(iFace $driver)
		{
			$this->driver = $driver;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getDriver()
		{
			return $this->driver;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (required)
		 */
		public function generate($model)
		{
			$class = new \ReflectionClass($model);
			
			if ($class->hasMethod('getTable')) {
				$table = $model->getTable();
			} else if ($class->hasProperty('table')) {
				$property = $class->getProperty('table');

				if ($property->isPublic()) {
					$table = $property->getValue($model);
				}
			}

			if (empty($table)) {
				throw Core::error('mvc.model.activerecord.need-table', null, Error::CODE_MVC);
			} else {
				$this->setTable($table);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $table (required)
		 */
		public function setTable($table)
		{
			$this->table = $table;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (required)
		 */
		public function insert($data)
		{
			$fields = array();

			foreach ($data as $field => $value) {
				if (is_int($value)) {
					$fields[$field] = $value;
				} else if (is_string($value)) {
					$fields[$field] = $value;
				} else {
					throw Core::error('Invalid data in array');
				}
			}

			$stmt = $this->driver->insert($this->name, $fields);

			try {
				$this->driver->begin();
				$rows = $stmt->execute();

				if ($rows == 1) {
					$this->driver->commit();
					return true;
				} else {
					$this->driver->rollback();
					return false;
				}
			} catch (\Exception $e) {
				$this->driver->rollback();
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $id (required)
		 * @param    $data (Array, required)
		 */
		public function update($id, array $data)
		{
			if (empty($data)) {
				throw Smash::error('No data input to update in the database');
			}

			$fields = array();

			foreach ($data as $field => $value) {
				if (is_int($value)) {
					$fields[$field] = $value;
				} else if (is_string($value)) {
					$fields[$field] = $value;
				} else {
					throw Smash::error('Invalid data in array');
				}
			}

			$stmt = $this->driver->update($this->name, $fields, 'id = %d');

			try {
				$this->driver->begin();
				$rows = $stmt->execute($id);

				if ($rows == 1) {
					$this->driver->commit();
					return true;
				} else {
					$this->driver->rollback();
					throw Smash::error('Update user info failed');
				}
			} catch (\Exception $e) {
				$this->driver->rollback();
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $id (required)
		 */
		public function delete($id)
		{
			$stmt = $this->driver->delete($this->name, 'id = %d');

			try {
				$this->driver->begin();
				$rows = $stmt->execute($id);

				if ($rows == 1) {
					$this->driver->commit();
					return true;
				} else {
					$this->driver->rollback();
					throw Smash::error('Deleting user failed');
				}
			} catch (\Exception $e) {
				$this->driver->rollback();
				return false;
			}
		}
	}
?>