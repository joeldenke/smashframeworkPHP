<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model;

	use   Smash\Core,
		Smash\Library;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\Model
	 * @uses         Smash\Core,  Smash\Library
	 * @interfaces   ArrayAccess, IteratorAggregate, Traversable
	 * @package      Result
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Result implements \ArrayAccess, \IteratorAggregate
	{
		private   $driver;
		private   $result;
		private   $fetchMode;
		private   $sql;

		protected $rows   = null;
		protected $cursor = 0;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (required)
		 * @param    $result (required)
		 */
		public function __construct($driver, $result)
		{
			$this->driver    = $driver;
			$this->fetchMode = $driver->getOption('fetchmode');
			$this->sql       = $driver->getLastQuery();
			$this->result    = $result;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $mode (optional)
		 */
		public function fetch($mode = null)
		{
			if (!$mode) {
				$mode = $this->fetchMode;
			}

			$this->rows = $this->driver->fetch($this->result, $mode);
			$this->cursor++;

			return $this->rows;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $mode (optional)
		 */
		public function fetchRow($mode = null)
		{
			if (!$mode) {
				$mode = $this->fetchMode;
			}

			return $this->fetch($mode);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $mode (optional)
		 */
		public function fetchAll($mode = null)
		{
			$rows = array();

			while ($row = $this->fetch($mode)) {
				$rows[] = $row;
			}

			return $rows;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function closeCursor()
		{
			if ($this->result instanceof \PDOStatement) {
				$this->result->closeCursor();
			} else if ($this->result instanceof \mysqli_result) {
				$this->result->free();
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function rowCount()
		{
			if ($this->result instanceof \PDOStatement) {
				return $this->result->rowCount();
			} else {
				return (int) $this->driver->numRows();
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $offset (required)
		 */
		public function offsetExists($offset)
		{
			return isset($this->rows[$offset]);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $offset (required)
		 */
		public function offsetGet($offset)
		{
			return $this->rows[$offset];
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $offset (required)
		 * @param    $value (required)
		 */
		public function offsetSet($offset, $value)
		{
			$this->rows[$offset] = $value;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $offset (required)
		 */
		public function offsetUnset($offset)
		{
			unset($this->rows[$offset]);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getIterator()
		{
			if (!$this->result) {
				throw Core::error('Missing or empty resultset');
			}

			return Library::factory('mvc.model.result.iterator', $this->result, $this->driver);
		}
	}
?>
