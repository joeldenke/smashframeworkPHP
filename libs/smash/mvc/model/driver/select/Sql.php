<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model\Driver\Select;

	use Smash\Mvc\Model\Driver\Surface as Driver;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\Model\Driver\Select
	 * @uses         Smash\Mvc\Model\Driver\Surface as Driver
	 * @interfaces   Smash\Mvc\Model\Driver\Select\Surface
	 * @package      Sql
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Sql implements Surface
	{
		private $driver;

		const FROM  = 'dbms_from';
		const COLS  = 'dbms_cols';
		const WHERE = 'dbms_where';

		protected $clauses = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (Smash\Mvc\Model\Driver\Surface Object, required)
		 */
		public function __construct(Driver $driver)
		{
			$this->driver = $driver;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __toString()
		{
			$sql = 'SELECT ';

			if ($this->hasClause(self::COLS)) {
				$cols = $this->getClause(self::COLS);
				$sql .= implode(', ', $cols);
			}

			$sql .= ' FROM '. implode(', ', $this->getClause(self::FROM));

			if ($this->hasClause(self::WHERE)) {
				$whereClauses = $this->getClause(self::WHERE);
				$sql .= ' WHERE '. implode('', $whereClauses);
			}

			return $sql;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $table (required)
		 */
		public function from($table)
		{
			$this->setClause(self::FROM, $table);
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $cols (required)
		 */
		public function cols($cols)
		{
			if (is_array($cols)) {
				foreach ($cols as $col) {
					$this->setClause(self::COLS, $col);
				}
			} else if (is_string($cols)) {
				$this->setClause(self::COLS, $cols);
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $condition (required)
		 * @param    $replace (optional)
		 */
		public function where($condition, $replace = false)
		{
			if ($replace) {
				$whereClauses = $this->getClause(self::WHERE);

				foreach ($whereClauses as $key => $whereClause) {
					if ($condition == $whereClause) {
						$this->clauses[self::WHERE][$key] = $condition;
					}
				}
			} else {
				if ($this->hasClause(self::WHERE)) {
					$this->setClause(self::WHERE, "AND ($condition)");
				} else {
					$this->setClause(self::WHERE, "($condition)");
				}
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, private
		 * @param    $type (required)
		 * @param    $value (required)
		 */
		final private function setClause($type, $value)
		{
			switch ($type) {
				case self::FROM :
					$this->clauses[$type][] = $this->driver->quoteIdentify($value);
					break;
				case self::COLS :
					if ($value == '*') {
						$this->clauses[$type][] = $value;
					} else {
						$this->clauses[$type][] = $this->driver->quoteIdentify($value);
					}
					break;
				case self::WHERE :
					$this->clauses[$type][] = $value;
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, public
		 * @param    $type (required)
		 */
		final public function getClause($type)
		{
			if ($this->hasClause($type)) {
				return $this->clauses[$type];
			}

			return null;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $type (required)
		 */
		final protected function hasClause($type)
		{
			return array_key_exists($type, $this->clauses) && !empty($this->clauses[$type]);
		}
	}
?>