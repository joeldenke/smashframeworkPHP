<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model\Driver;

	use   Smash\Core,
		Smash\Library,
		Smash\Error,
		Smash\Inflector,
		Smash\Mvc\Model\Driver,
		Smash\Mvc\Model as DB;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\Model\Driver
	 * @uses         Smash\Core,  Smash\Library,  Smash\Error,  Smash\Inflector,  Smash\Mvc\Model\Driver,  Smash\Mvc\Model as DB
	 * @extends      Smash\Mvc\Model\Driver
	 * @interfaces   Smash\Mvc\Model\Driver\Surface
	 * @package      Mysqli
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Mysqli extends Driver implements Surface
	{
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function connect()
		{
			if (!extension_loaded('mysqli')) {
				throw Core::error('Extension mysqli is not loaded');
			}

			$hostname = $this->getDSN('hostname');
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $model (Smash\Mvc\Model Object, required)
			 */
			$username = $this->getDSN('username');
			$password = $this->getDSN('password');
			$database = $this->getDSN('database');

			$port     = $this->getDSN('port');
			$socket   = $this->getDSN('protocol') == 'unix' ? $this->getDSN('socket') : null;

			// Weird bug, because ReflectionClass does not work with extension classes obviously. I got
			// the error: "Cannot fetch mysqli" and inside the destructor which is trying to close the mysqli
			// connection which cannot be find. Then I got Unknown Exception stack on line 0 etc etc.
			$mysqli = @new \mysqli($hostname, $username, $password, $database, $port, $socket);

			if (mysqli_connect_error()) {
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 */
				throw Core::error(mysqli_connect_error(), null, mysqli_connect_errno());
			} else {
				$this->connection = $mysqli;
				$this->connected  = true;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function close()
		{
			$this->connected = false;

			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 */
			if (!$this->connection->close()) {
				$this->connection = null;
				throw Core::error($this->errInfo(), null, $this->errCode());
			}

			$this->connection = null;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 */
		public function changeDB($name)
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		{
			if (!$this->connection->select_db($name)) {
				throw Core::error($this->errInfo(), null, $this->errCode());
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $string (required)
		 */
		public function escape($string)
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		{
			return $this->connection->real_escape_string($string);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getIdentifierSymbol()
		{
			return '`';
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function errInfo()
		{
			$error = $this->connection->error;
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 */
			return empty($error) ? 'No error occured' : $error;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function errCode()
		{
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $index (optional)
			 */
			$errno = $this->connection->errno;
			return $errno > 0 ? $errno : 'No error occured';
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function select()
		{
			return Library::factory('mvc.model.driver.select.sql', $this);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $dsn (required)
		 */
		public function update($table, array $data, $where = null)
		{
			$values = array();

			foreach ($data as $key => $val) {
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $index (required)
				 * @param    $value (required)
				 */
				$values[] = "$key = ". $this->quote($val);
			}

			$sql = sprintf(
				'UPDATE %s SET %s %s',
				$this->quoteIdentify($table),
				implode(', ', $values),
				(!empty($where)) ? 'WHERE ' . $where : null
			);
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $index (required)
 */

			return $this->prepare($sql);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $table (required)
		 * @param    $whereClause (required)
		 */
		public function delete($table, $whereClause)
		{
			$sql = sprintf('DELETE FROM %s WHERE %s', $this->quoteIdentify($table), $whereClause);
			return $this->prepare($sql);
		}
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $sql (required)
 */

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $table (required)
		 * @param    $data (Array, required)
		 */
		public function insert($table, array $data)
		{
			$values = array();

			foreach (array_values($data) as $value) {
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 */
				$values[] = $this->quote($value);
			}

			$fields = implode(array_keys($data), ', ');
			$values = implode($values, ', ');
			/**
			 * Description goes here ...
			 * 
			 * @access   protected
			 * @param    $sql (required)
			 */
			$sql    = sprintf('INSERT INTO %s (%s) VALUES (%s)', $this->quoteIdentify($table), $fields, $values);

			return $this->prepare($sql);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $sql (required)
		 */
		public function prepare($sql)
		{
			$this->connect();
			$stmt = $this->getStatement();
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $type (required)
			 */
			return $stmt->prepare($sql);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getStatement()
		{
			return Library::factory('mvc.model.driver.statement.mysqli', $this);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $sql (required)
		 * @param    $connection (optional)
		 * @param    $database (optional)
		 */
		public function query($sql, $connection = null, $database = null)
		{
			$mysqli = ($connection instanceof \mysqli) ? $connection : $this->connection;

			if (!empty($database)) {
				$this->changeDB($database);
			}

			if ($this->getOption('buffering')) {
				$result = $mysqli->query($sql);
			} else {
				$mysqli->real_query($sql);
				$result = $mysqli->use_result();
			}

			if (!$result) {
				throw Core::error($this->errInfo(), array('query' => $sql), $this->errCode());
			} else {
				$this->setLastQuery($sql);

				if ($result instanceof \mysqli_result) {
					/**
					 * Description goes here ...
					 * 
					 * @access   public
					 * @param    $value (required)
					 */
					return Library::factory('mvc.model.result', $this, $result);
				} else {
					return $this->affectedRows();
				}
			}
		}
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $value (required)
 */

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $result (required)
		 * @param    $mode (optional)
		 */
		public function fetch($result, $mode = null)
		{
			if (!$result instanceof \mysqli_result) {
				throw Core::error('Invalid result resource: %result', array('result' => $result));
			} else {
				if (empty($mode)) {
					$mode = $this->getOption('fetchmode');
				}
				switch ($mode) {
					case DB::FETCH_BOTH :
						$entries = $result->fetch_array(MYSQLI_BOTH);
						break;
					case DB::FETCH_ROW :
						$entries = $result->fetch_row();
						break;
					case DB::FETCH_ASSOC :
						$entries = $result->fetch_assoc();
						break;
					case DB::FETCH_OBJECT :
						$entries = $result->fetch_object();
						break;
					default :
						throw Smash::error('Invalid fetch method: %method', array('method' => $mode));
						break;
				}

				return $entries;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $result (required)
		 * @param    $pos (optional)
		 */
		public function seek($result, $pos = 0)
		{
			if (!$result instanceof mysqli_result) {
				throw Core::error('Invalid result resource: %result', array('result' => $result));
			} else if (!$result->data_seek($pos)) {
				throw Core::error($this->errInfo(), null, $this->errCode());
			} else {
				return true;
			}
		}

	/**
	 * Description goes here ...
	 * 
	 * @access   public
	 */
	    public function begin()
		{
			$this->connection->autocommit(false);
			$hasTransaction = true;
	    }

	/**
	 * Description goes here ...
	 * 
	 * @access   public
	 */
	    public function commit()
		{
			$this->connection->commit();
			$this->connection->autocommit(true);
			$hasTransaction = false;
	    }

	/**
	 * Description goes here ...
	 * 
	 * @access   public
	 */
	    public function rollback()
		{
			$this->connection->rollback();
			$this->connection->autocommit(true);
			$hasTransaction = false;
	    }

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function affectedRows()
		{
			if (-1 === $rows = $this->connection->affected_rows) {
				throw Core::error($this->errInfo(), null, $this->errCode());
			} else {
				return $rows;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function numRows()
		{
			return $this->connection->num_rows;
		}
	}
?>