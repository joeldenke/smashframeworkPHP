<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Model;

	use   Smash\Mvc\Model as DB,
		Smash\Storage\Config,
		Smash\Core,
		Smash\Error;

	// TODO: Make support for more drivers, like Oracle, Access etc.
	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\Model
	 * @uses        Smash\Mvc\Model as DB,  Smash\Storage\Config,  Smash\Core,  Smash\Error
	 * @package     Driver
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	abstract class Driver
	{
		private $model;
		private $options;
		private $dsn;

		protected $connected  = false;
		protected $connection = null;
		protected $lastQuery  = null;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (Smash\Mvc\Model Object, required)
		 */
		public function __construct(DB $model)
		{
			$this->options = new Config(
				array(
					'buffering'    => true,
					'fetchmode'    => DB::FETCH_BOTH
				),
				Config::MODE_EDIT
			);

			$this->model = $model;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __destruct()
		{
			if ($this->connected) {
				try {
					$this->close();
				} catch (Error $e) {
					// Do nothing because you cannot throw exceptions in a destructor.
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __sleep()
		{
			if ($this->connection instanceof DB) {
				$this->connected = true;
			} else {
				$this->connected = false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __wakeup()
		{
			if ($this->connected) {
				$this->connect();
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __toString()
		{
			$info = get_class($this);
			$info.= ': (driver = '. $this->getDSN('driver') .', database = '. $this->database .')';

			if ($this->connection instanceof DB) {
			$info.= ' [connected]';
			}

			return $info;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getModel()
		{
			return $this->model;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (optional)
		 */
		public function getDSN($index = null)
		{
			if (!empty($index)) {
				return $this->dsn->offsetGet($index);
			} else {
				return $this->dsn->asArray();
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $dsn (required)
		 */
		public function setDSN($dsn)
		{
			$this->dsn = new Config($this->getModel()->parseConfig($dsn), Config::MODE_ALL);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $value (required)
		 */
		public function setOption($index, $value)
		{
			if ($this->options->offsetExists($index)) {
				return $this->options->offsetSet($index, $value);
			} else {
				throw Core::error('Option does not exist: %option', array('option' => $index));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function getOption($index)
		{
			if ($this->options->offsetExists($index)) {
				return $this->options->offsetGet($index);
			} else {
				throw Core::error('Option does not exist: %option', array('option' => $index));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $sql (required)
		 */
		public function setLastQuery($sql)
		{
			$this->lastQuery = $sql;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getLastQuery()
		{
			return $this->lastQuery;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   protected
		 * @param    $sql (required)
		 */
		protected function isManip($sql)
		{
			if (preg_match('/^\s*"?(INSERT|UPDATE|DELETE|REPLACE)\s+/i', $sql)) {
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $type (required)
		 */
		public function getDataRule($type)
		{
			switch ($type) {
				case 'tinyint' :
				case 'smallint' :
				case 'mediumint' :
				case 'int' :
				case 'bigint' :
					return 'integer';
				case 'float' :
				case 'double' :
				case 'decimal' :
					return 'float';
				case 'date' :
					return $type;
				case 'datetime' :
				case 'timestamp' :
				case 'time' :
					return 'datetime';
				default :
					return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   protected
		 */
		protected function getIdentifierSymbol()
		{
			return "'";
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $value (required)
		 */
		public function quoteIdentify($value)
		{
			$q = $this->getIdentifierSymbol();
			return ($q . str_replace("$q", "$q$q", $value) . $q);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $value (required)
		 */
		public function quote($value)
		{
			switch (true) {
				case is_array($value) :
				case is_object($value) :
					return "'". $this->escape(serialize($value)) ."'";
					break;
				case is_bool($value) :
					return (int)$value;
					break;
				case is_null($value) :
					return 'NULL';
					break;
				case is_int($value) :
				case is_numeric($value) :
				case is_double($value) :
					return $value;
					break;
				default :
					if ($value[0] !== $this->getIdentifierSymbol()) {
						return "'". $this->escape($value). "'";
					} else {
						return $value;
					}
					break;
			}
		}
	}
?>
