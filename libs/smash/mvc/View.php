<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc;

	use	Smash\Library,
		Smash\Core,
		Smash\Storage\Filestream as Stream,
		Smash\Mvc\Controller,
		Smash\Error;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc
	 * @uses        Smash\Library,  Smash\Core,  Smash\Storage\Filestream as Stream,  Smash\Mvc\Controller,  Smash\Error
	 * @package     View
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class View
	{
		protected $controller   = null;
		protected $renderer     = null;
		protected $params       = array();

		private $file           = null;
		private $layout         = null;
		private $suffix         = 'phtml';

		private $escape         = 'htmlspecialchars';
		private $charset        = 'utf-8';
		private $autoResetModel = false;

		private $placeHolder    = array();
		private $filters        = array();
		private $helpers        = array();
		private $paths          = array(
			'filter' => array(),
			'helper' => array()
		);

		private $templatePath   = null;
		private $layoutPath     = null;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $controller (Smash\Mvc\Controller Object, required)
		 * @param    $renderer (optional)
		 */
		public function __construct(Controller $controller, $renderer = null)
		{
			$this->controller        = $controller;
			$this->templatePath      = $controller->getModule()->getPath('templates');
			$this->paths['filter'][] = dirname(__FILE__) . Core::DS .'view'. Core::DS .'filter';
			$this->paths['helper'][] = dirname(__FILE__) . Core::DS .'view'. Core::DS .'helper';

			if (!empty($renderer)) {
				$this->setRenderer($renderer);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $suffix (required)
		 */
		public function setSuffix($suffix)
		{
			$this->suffix = $suffix;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getSuffix()
		{
			return $this->suffix;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (required)
		 */
		public function setPath($path)
		{
			if (Stream::exists($path) && @is_readable($path)) {
				$this->templatePath = Core::cleanPath($path);
				return $this;
			} else {
				throw Core::error('Template path is not valid: %path', array('path' => $path), 1004);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $filter (required)
		 */
		public function addFilter($filter)
		{
			if (is_string($filter) || is_object($filter)) {
				$this->filters[] = $this->getFilter($filter);
			} else if (is_array($filter)) {
				foreach ($filter as $name) {
					$this->addFilter($name);
				}
			} else {
				throw Core::error('Filter must be added as an array or a string', null, $this);
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $filter (required)
		 */
		public function setFilter($filter)
		{
			$this->filters = array();
			$this->addFilter($filter);

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 */
		public function getFilter($name)
		{
			if ($name instanceof View\Filter\Surface) {
				$filter = $name;
			} else {
				$class  = $this->load('filter', $name);
				$filter = Library::factory($class);
			}

			if (method_exists($filter, 'setView')) {
				$filter->setView($this);
			}

			return $filter;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $function (required)
		 */
		public function setEscape($function)
		{
			if (in_array($function, array('htmlspecialchars', 'htmlentities'))) {
				$this->escape = $function;
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $layout (required)
		 */
		public function setLayout($layout)
		{
			$module = $this->getController()->getModule();
			$file   = $module->getPath('layout', array('layout' => $layout, 'suffix' => $this->suffix));

			if (!preg_match('/\.([^\.]+)$/', $file, $matches)) {
				$file = $file .'.'. $this->suffix;
			}

			if (!file_exists($file)) {
				throw Core::error('Layout template file does not exist: %file', array('file' => $file));
			} else {
				$this->layout = $file;
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getLayout()
		{
			return $this->layout;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $module (optional)
		 */
		public function renderPartial($name, $module = null)
		{
			$file = $this->getController()->getFile('template', array('default' => $module . Core::DS . $name));
			include $file;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $template (optional)
		 */
		public function render($template = null)
		{
			if (is_readable($template)) {
				$file = $template;
			} else {
				$file = $this->getController()->getFile('template', $template);
			}

			if (!empty($this->renderer)) {
				return $this->renderer->render($file);
			} else {
				$layout = $this->getLayout();

				if (!empty($layout) && empty($this->file)) {
					$this->file = $file;
				}

				$obLevel = ob_get_level();

				try {
					ob_start();
					include $file;
					$output = ob_get_clean();

					if (empty($layout) || $file !== $this->file) {
						return $this->filter($output);
					} else {
						$this->setPlaceholder('smash_content', $output);
						return $this->filter($this->render($layout));
					}
				} catch (\Exception $e) {
					while (ob_get_level() > $obLevel) {
						@ob_end_clean();
					}

					throw $e;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $index (required)
		 * @param    $value (required)
		 * @param    $overwrite (optional)
		 */
		final protected function setPlaceHolder($index, $value, $overwrite = false)
		{
			if ($overwrite === true) {
				$this->placeHolder[$index] = $value;
			} else {
				if (!array_key_exists($index, $this->placeHolder)) {
					$this->placeHolder[$index] = $value;
				}
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $index (required)
		 */
		final protected function getPlaceHolder($index)
		{
			if (array_key_exists($index, $this->placeHolder)) {
				return $this->placeHolder[$index];
			} else {
				return null;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $var (required)
		 * @param    $charset (optional)
		 */
		public function escape($var, $charset = null)
		{
			if (!empty($this->escape)) {
				if (!empty($charset)) {
					return call_user_func($this->escape, $var, ENT_COMPAT, $charset);
				} else if (!empty($this->charset)) {
					return call_user_func($this->escape, $var, ENT_COMPAT, $this->charset);
				} else {
					return call_user_func($this->escape, $var);
				}
			}

			return;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $charset (required)
		 */
		public function setCharset($charset)
		{
			$this->charset = $charset;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getCharset()
		{
			return $this->charset;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $type (required)
		 * @param    $name (required)
		 */
		private function load($type, $name)
		{
			$name  = ucfirst($name);
			$class = __NAMESPACE__ .'\\View\\'. ucfirst($type) .'\\'. $name;
			$file  = $name .'.php';

			foreach ($this->paths[$type] as $path) {
				$filePath = $path . Core::DS . $file;

				if (is_readable($filePath)) {
					if (!in_array($filePath, get_included_files())) {
						include $filePath;
					}

					return $class;
				}
			}

			throw Core::error('Could not find %type %name', array('type' => $type, 'name' => $name), 1004);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $buffer (required)
		 */
		private function filter($buffer)
		{
			foreach ($this->filters as $filter) {
				$buffer = $filter->filter($buffer);
			}

			return $buffer;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $namespace (optional)
		 */
		public function getParam($index, $namespace = null)
		{
			return $input->getParam($index, $namespace);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $value (required)
		 */
		public function __set($param, $value)
		{
			if (!empty($this->renderer)) {
				$this->renderer->$param = $value;
			} else {
				if (!array_key_exists($param, $this->params)) {
					$this->params[$param] = $value;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 */
		public function __get($param)
		{
			if (!empty($this->renderer)) {
				return $this->renderer->$param;
			} else {
				if (array_key_exists($param, $this->params)) {
					return $this->params[$param];
				} else {
					return null;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $args (Array, required)
		 */
		public function __call($name, array $args)
		{
			$controller = $this->getController();

			if (method_exists($controller, $name)) {
				return call_user_func_array(array($controller, $name), $args);
			} else {
				if (empty($args)) {
					$class  = $this->load('helper', $name);
					$helper = Library::factory($class);
					
					if (method_exists($helper, 'setView')) {
						$helper->setView($this);
					}
					
					return $helper;
				} else {
					$extra = array_shift($args);

					if (array_key_exists($name, $this->helpers) && is_callable(array($this->helpers[$name], $extra))) {
						return call_user_func_array(array($this->helpers[$name], $extra), $args);
					} else {
						$class = $this->load('helper', $name);

						if (is_array($extra)) {
							$helper = Library::factoryByParams($class, $extra);
						} else {
							$helper = Library::factory($class);
						}

						if (method_exists($helper, 'setView')) {
							$helper->setView($this);
						}

						if (!array_key_exists($name, $this->helpers)) {
							$this->helpers[$name] = $helper;
						}

						if (is_string($extra)) {
							if (is_callable(array($helper, $extra))) {
								return call_user_func_array(array($helper, $extra), $args);
							} else {
								throw Core::error('invalid-helper-method-call');
							}
						} else {
							return $helper;
						}
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $renderer (Smash\Mvc\View\Render\Surface Object, required)
		 */
		public function setRenderer(View\Render\Surface $renderer)
		{
			$this->renderer = $renderer;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getRenderer()
		{
			return $this->renderer;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getController()
		{
			return $this->controller;
		}
	}
?>