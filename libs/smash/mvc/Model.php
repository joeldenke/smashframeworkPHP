<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc;

	use	Smash\Core,
		Smash\Inflector,
		Smash\Library,
		Smash\Error,
		Smash\Storage\Config,
		Smash\Mvc\Model\Driver\Surface;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc
	 * @uses        Smash\Core,  Smash\Inflector,  Smash\Library,  Smash\Error,  Smash\Storage\Config,  Smash\Mvc\Model\Driver\Surface
	 * @package     Model
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Model
	{
		protected $controller = null;
		protected $module     = null;
		protected $suffix     = 'php';
		protected $driver     = null;

		const FETCH_ASSOC  = 0x012345;
		const FETCH_ROW    = 0x006789;
		const FETCH_BOTH   = 0x001011;
		const FETCH_OBJECT = 0x001213;

		private $config = array(
			'driver'   => null,
			'socket'   => null,
			'protocol' => null,
			'hostname' => null,
			'username' => null,
			'password' => null,
			'database' => null,
			'port'     => 3306
		);

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $controller (Smash\Mvc\Controller Object, required)
		 */
		public function __construct(Controller $controller)
		{
			$this->controller = $controller;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getController()
		{
			return $this->controller;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getValidDrivers()
		{
			$dir     = new \DirectoryIterator(dirname(__FILE__) . Inflector::classypath('-model-driver'));
			$drivers = extension_loaded('pdo') ? \PDO::getAvailableDrivers() : array();

			foreach ($dir as $entry) {
				if ($entry->isFile()) {
					$file = strtolower($entry->getFilename());
					$f    = explode('.', $file);
					$ext  = array_pop($f);
					$name = implode('.', $f);

					switch ($name) {
						case 'surface'   :
						case 'result'    :
						case 'pdo'       :
							break;
						default          :
							$drivers[] = $name;
							break;
					}
				}
			}

			return $drivers;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $type (required)
		 * @param    $driver (optional)
		 */
		public function isType($type, $driver = null)
		{
			if (array_key_exists($type, $this->types)) {
				if (!empty($this->types[$type])) {
					if (!empty($driver)) {
						if (array_key_exists($driver, $this->types[$type])) {
							return true;
						} else {
							return false;
						}
					} else {
						return true;
					}
				} else {
					return true;
				}
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $dsn (Array, required)
		 */
		static public function DsnToString(array $dsn)
		{
			return $dsn['driver'].'://'. $dsn['username'] .':'. $dsn['password'] .'@'. $dsn['hostname'] .'/'. $dsn['database'];
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (required)
		 */
		public function parseConfig($config)
		{
			if ($config instanceof Config) {
				return array_merge($this->config, $config->asArray());
			} else if (is_array($config)) {
				return array_merge($this->config, $config);
			} else if (is_string($config)) {
				$segments = parse_url($config);

				foreach ($segments as $segment => $value) {
					switch ($segment) {
						case 'scheme' :
							$parsed['driver'] = $value;
							break;
						case 'host' :
							if (strpos($value, '+') !== false) {
								list($socket, $host) = explode('+', $value, 2);
								$parsed['socket']    = $socket;
								$parsed['hostname']  = rawurldecode($host);
							} else {
								$parsed['hostname'] = rawurldecode($value);
							}
							break;
						case 'port' :
							$parsed['port'] = $value;
							break;
						case 'user' :
							$parsed['username'] = $value;
							break;
						case 'pass' :
							$parsed['password'] = $value;
							break;
						case 'path' :
							$parsed['database'] = ltrim($value, '/');
							break;
						case 'query' :
							parse_str($value, $query);

							foreach ($query as $key => $value) {
								if (!isset($parsed[$key])) {
									$parsed[$key] = rawurldecode($value);
								}
							}
							break;
					}
				}

				return array_merge($this->config, $parsed);
			} else {
				throw Core::error('mvc.model.invalid-dsn');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (required)
		 * @param    $options (Array)
		 */
		public function driverFactory($config, array $options = array())
		{
			$config = $this->parseConfig($config);

			if (!empty($config['driver'])) {
				if ($this->isDriver($config['driver'])) {
					$driver = Library::factory('mvc.model.driver.'. $config['driver'], $this);
				} else {
					if (in_array($config['driver'], \PDO::getAvailableDrivers())) {
						$driver = Library::factory('mvc.model.driver.pdo', $this);
					} else {
						throw Core::error('mvc.model.invalid-dbms', array('dbms' => $config['driver']));
					}
				}

				$driver->setDSN($config);

				if (!empty($options)) {
					foreach ($options as $option => $value) {
						$driver->setOption($option, $value);
					}
				}

				$this->setDriver($driver);
				return $driver;
			} else {
				throw Core::error('mvc.model.no-driver');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (required)
		 * @param    $options (Array)
		 */
		public function connect($config, array $options = array())
		{
			$driver = $this->driverFactory($config, $options);
			$driver->connect();

			return $driver;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (Smash\Mvc\Model\Driver\Surface Object, required)
		 */
		public function setDriver(Surface $driver)
		{
			$this->driver = $driver;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (optional)
		 */
		public function getDriver($config = null)
		{			
			if (!empty($config)) {
				if (!$this->hasDriver()) {
					$driver = $this->driverFactory($config);
				}
				
				$driver->connect();
				
				return $driver;
			}
			
			return $this->driver;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function hasDriver()
		{
			return ($this->driver instanceof Surface);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $driver (required)
		 */
		public function isDriver($driver)
		{
			return is_readable(dirname(__FILE__) . Inflector::classyfile('-model-driver-'. $driver));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (optional)
		 */
		public function getGenerator($path = null)
		{
			$module = $this->controller->getModule();
			$base = empty($path) ? $module->getPath() .Core::DS .'models' : $path;
			return Library::factory('mvc.model.generator', $this, $base);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $suffix (required)
		 */
		public function setSuffix($suffix)
		{
			$this->suffix = $suffix;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getSuffix()
		{
			return $this->suffix;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $config (optional)
		 */
		public function getModel($name, $config = null)
		{
			$class = new \ReflectionClass($name);
			
			try {
				if ($class->isSubclassOf('Smash\\Mvc\\Model\\Activerecord')) {
					$model = $class->newInstance($this->getDriver($config));
					$model->generate($model);
				} else {
					$model = $class->newInstance();

					if ($this->hasDriver()) {
						if ($class->hasMethod('setDriver')) {
							$model->setDriver($this->getDriver($config));
						}
					}
				}

				return $model;
			} catch (\ReflectionException $e) {
				throw Core::error($e->getMessage(), null, $e->getCode());
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $config (optional)
		 * @param    $table (optional)
		 */
		public function factory($name, $config = null, $table = null)
		{
			$file  = $this->getController()->getFile('model', $name);
			$name  = Inflector::modelify($this->getController()->getCustomName($name));

			if (class_exists($name, false)) {
				return $this->getModel($name, $config);
			}
			
			if (is_readable($file)) {
				if (!in_array($file, get_included_files())) {
					include $file;
				}
			} else {
				throw Core::error('mvc.model.file-not-found', array('file' => $file), Error::CODE_MVC);
			}
			
			return $this->getModel($name, $config);
		}
	}
?>