<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Render;
	use   Smash\Mvc\View,
		Smash\Library,
		Smash\Core;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Render
	 * @uses         Smash\Mvc\View,  Smash\Library,  Smash\Core
	 * @interfaces   Smash\Mvc\View\Render\Surface
	 * @package      Xsl
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Xsl implements Surface
	{
		protected $engine     = null;
		protected $options    = array(
			'autoclean'   => false
		);
		protected $encoding   = 'iso-8859-1'; // Swedish encoding as standard, maybe UTF-8 later.
		protected $buffer     = null;

		private $title        = null;
		private $host         = null;
		private $pageID       = null;
		private $meta         = null;
		private $content      = null;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (optional)
		 */
		public function __construct($options = null)
		{
			if ($options !== null) {
				$this->setOptions($options);
			}

			$this->engine = Library::factory('serialize.xml.xsl.engine');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   protected
		 * @param    $options (optional)
		 */
		protected function setOptions($options = null)
		{
			if (is_array($options)) {
				foreach ($options as $option => $value) {
					if (array_key_exists($option, $this->options)) {
						$this->options[$option] = $value;
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   protected
		 * @param    $option (required)
		 */
		protected function getOption($option)
		{
			if (array_key_exists($option, $this->options)) {
				return $this->options[$option];
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getEngine()
		{
			return $this->engine;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $value (required)
		 */
		public function __set($param, $value)
		{
			$this->engine->setParam($param, $value);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 */
		public function __get($param)
		{
			return $this->engine->getParam($param);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $value (optional)
		 */
		public function assign($param, $value = null)
		{
			if (is_array($param)) {
				foreach ($param as $key => $value) {
					$this->engine->setParam($key, $value);
				}

				return $this;
			} else {
				$this->engine->setParam($param, $value);
				return $this;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clearParams()
		{
			$this->engine->destroyParams();
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $title (required)
		 */
		public function setTitle($title)
		{
			$this->title = $title;
			$this->assign('title', $title);

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $host (required)
		 */
		public function setHost($host)
		{
			$this->host = $host;
			$this->assign('host', $host);

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $id (required)
		 */
		public function setPageID($id)
		{
			$this->pageID = $id;
			$this->assign('page', $id);

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (required)
		 */
		public function appendMeta($xml)
		{
			$this->meta .= $xml;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (required)
		 */
		public function setContent($xml)
		{
			$this->content = $xml;
			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $file (required)
		 */
		public function render($file)
		{
			if (empty($this->title)) {
				$this->setTitle('Unknown');
			}
			if (empty($this->pageID)) {
				$this->setPageID('1');
			}
			if (empty($this->host)) {
				$this->setHost('http://localhost');
			}

			$this->buffer  = '<?xml version="1.0" encoding="'. $this->encoding .'" ?>'. CRLF;
			$this->buffer .= '<!DOCTYPE xsl:stylesheet [<!ENTITY nbsp "&#160;">]>'. CRLF;
			$this->buffer .= '<page timestamp="'. time() .'">'. CRLF;
			$this->buffer .= '	<meta>'. CRLF;
			$this->buffer .= $this->meta;
			$this->buffer .= '	</meta>'. CRLF;
			$this->buffer .= '	<content>'. CRLF;
			$this->buffer .= $this->content;
			$this->buffer .= '	</content>'. CRLF;
			$this->buffer .= '</page>'. CRLF;

			$this->engine->setXML($this->buffer);

			if (is_readable($file)) {
				return $this->engine->render($file);
			} else {
				throw Core::error('Template is not readable: %template', array('template' => $file));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __destruct()
		{
			if ($this->getOption('autoclean')) {
				$this->buffer = null;
			}
		}
	}
?>
