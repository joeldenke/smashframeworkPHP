<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Render;
	use   Smash\Mvc\View,
		Smash\Library,
		Smash\Core;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\View\Render
	 * @uses        Smash\Mvc\View,  Smash\Library,  Smash\Core
	 * @extends     Smash\Mvc\View
	 * @package     Smarty
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Smarty extends View
	{
		protected $template_dir = null;
		protected $viewer       = null;

		protected $buffer       = null;
		protected $autoclean    = false;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $templateDir (optional)
		 * @param    $params (optional)
		 */
		public function __construct($templateDir = null, $params = array())
		{
			$this->viewer = Library::factory('Smarty');

			if ($templateDir) {
				$this->setScriptPath($templateDir);
			}

			foreach ($params as $key => $value) {
				$this->viewer->$key = $value;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $value (required)
		 */
		public function __set($index, $value)
		{
			if (is_object($value)) {
				$this->viewer->assign_by_ref($index, $value);
			} else {
				$this->viewer->assign($index, $value);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function __get($index)
		{
			return $this->viewer->get_template_vars($index);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function __isset($index)
		{
			return (!is_null($this->viewer->get_template_vars($index)));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $suffix (required)
		 */
		public function __unset($index)
		{
			$this->viewer->clear_assign($index);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getViewer()
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		{
			return $this->viewer;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (required)
		 */
		public function setScriptPath($path)
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (required)
		 */
		{
			if (is_readable($path)) {
				$this->viewer->template_dir = $path;
				return;
			} else {
				throw Core::error('Template path is not readable: %path', array('path' => $path));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $template (required)
		 */
		public function render($template)
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $filter (required)
		 */
		{
			if (empty($this->template)) {
				throw Core::error('Template must be definied before we can compile');
			}

			return $this->buffer = $this->viewer->fetch($template);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __destruct()
		{
			if ($this->autoclean) {
				$this->viewer->clear_all_assign();
				$this->buffer = null;
			}
		}
	/**
	 * Description goes here ...
	 * 
	 * @access   public
	 * @param    $filter (required)
	 */
	}
?>
