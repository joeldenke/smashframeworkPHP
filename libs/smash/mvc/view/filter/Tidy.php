<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Filter;

	use   Smash\Mvc\View,
		Smash\Error,
		Smash\Core;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Filter
	 * @uses         Smash\Mvc\View,  Smash\Error,  Smash\Core
	 * @interfaces   Smash\Mvc\View\Filter\Surface
	 * @package      Tidy
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Tidy implements Surface
	{
		private $view;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $view (Smash\Mvc\View Object, required)
		 */
		public function setView(View $view)
		{
			$this->view = $view;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (required)
		 */
		public function filter($data)
		{
			if (!extension_loaded('tidy')) {
				return $data;
			} else if (!is_string($data)) {
				$data = (string) $data;
			}

			$module = $this->view->getController()->getModule();
			$config = $module->getConfig();

			if ($config->exists(array('extensions', 'tidy'))) {
				$settings = $config->extensions->tidy->offsetAsArray();
			} else {
				$settings = array(
					'output-xhtml'   => true,
					'clean'          => true,
					'indent-spaces'  => 4,
					'wrap'           => 72,
					'indent'         => true,
					'tidy-mark'      => 'no',
					'show-body-only' => 'yes',
					'force-output'   => 'yes'
				);
			}

			$tidy = new \Tidy;
			$tidy->parseString($data, $settings, 'latin1');
			$tidy->cleanRepair();

			if ($tidy->errorBuffer) {
				$errors = $tidy->errorBuffer;
				throw Core::error('Error while Tidy tried to clean up the mess', array('error' => $errors), Error::CODE_MVC);
			} else {
				return (string) $tidy;
			}
		}
	}
?>
