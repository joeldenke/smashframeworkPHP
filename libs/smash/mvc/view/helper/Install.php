<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper;

	use	Smash\Library,
		Smash\Core,
		Smash\Error,
		Smash\Validate,
		Smash\Mvc\View,
		Smash\Mvc\Model,
		Smash\Storage\Config,
		Smash\Storage\Filestream;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Helper
	 * @uses         Smash\Library,  Smash\Core,  Smash\Error,  Smash\Validate,  Smash\Mvc\View,  Smash\Mvc\Model,  Smash\Storage\Config,  Smash\Storage\Filestream
	 * @interfaces   Smash\Mvc\View\Helper\Surface
	 * @package      Install
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Install implements Surface
	{
		protected $view;
		protected $form;
		protected $model;
		protected $hydrator;
		protected $cache;

		protected $tmpFile;
		protected $tmpDir;
		protected $tmp = array('config' => array());

		protected $options   = array(
			'dateFormat'   => 'Y-m-d',
			'suffix'       => 'php',
			'prefix'       => 'tmp-config-',
			'storeReplace' => true
		);
		protected $events    = array();
		protected $processes = array();
		protected $actions   = array();
		protected $config    = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $config (required)
		 * @param    $tmp (required)
		 * @param    $options (Array)
		 */
		public function __construct($config, $tmp, array $options = array())
		{
			foreach ($options as $key => $option) {
				if (array_key_exists($key, $this->options)) {
					$this->options[$key] = $option;
				}
			}
			
			$hydrator = Library::factory('storage.config.hydrator');

			if (is_dir($tmp) && is_readable($tmp)) {
				$this->tmpDir  = Core::cleanPath($tmp);
				$this->tmpFile = $this->tmpDir . md5($this->options['prefix'] . date($this->options['dateFormat'])) .'.'. $this->options['suffix'];
			} else {
				throw Core::error('helper.install.invalid-tmp-path', array('tmp' => $tmp));
			}

			if (file_exists($this->tmpFile)) {
				$this->tmp = $hydrator->read($this->tmpFile, array('addAttributes' => false, 'skipRoot' => true, 'asConfig' => false));
			} else {
				$this->tmp['store'] = array();
				
				if ($config instanceof Config) {
					$this->tmp['config'] = $config->asArray();
				} else if (is_array($config)) {
					$this->tmp['config'] = $config;
				} else if (is_readable($config)) {
					$this->tmp['config'] = $hydrator->read($config, array('addAttributes' => false, 'skipRoot' => true, 'asConfig' => false));
				}

				$hydrator->write($this->tmpFile, $this->tmp);
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $process (required)
		 */
		public function getProcess($process)
		{
			if (array_key_exists($process, $this->processes)) {
				return $this->processes[$process]['object'];
			} else {
				throw Core::error('helper.install.process-not-exists', array('process' => $process));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $formParams (Array)
		 */
		public function getForm(array $formParams = array())
		{
			if (!empty($formParams) || !$this->form instanceof Form) {
				$this->form = $this->view->form(array($formParams));
			}

			return $this->form;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $view (Smash\Mvc\View Object, required)
		 */
		public function setView(View $view)
		{
			$this->view = $view;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $parts (Array, required)
		 * @param    $params (Array, required)
		 */
		private function getCallback(array $parts, array $params)
		{
			$command = array_shift($parts);

			switch ($command) {
				case 'redirect' :
					return array($this->view->getController()->getResource(), $command, $params);
					break;
				case 'form' :
					return array($this->form, array_shift($parts), $params);
					break;
				case 'clear' :
					return array($this, $command, $params);
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $action (required)
		 * @param    $params (Array)
		 */
		public function addAction($action, array $params = array())
		{
			$parts = explode('.', $action);
			$type = array_shift($parts);

			switch ($type) {
				case 'invalid' :
				case 'success' :
				case 'error' :
					$this->actions[$type][] = $this->getCallback($parts, $params);
					break;
				default :
					throw Core::error('helper.install.invalid-action', array('type' => $type, 'action' => $action));
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $event (required)
		 * @param    $params (Array)
		 * @param    $extra (optional)
		 */
		public function addEvent($event, array $params = array(), $extra = '')
		{
			$entry = array();

			if (method_exists($this, $event)) {
				$entry = array('object' => __CLASS__, 'callbacks' => array());
				
				if ($event == 'store') {
					foreach ($params as $key => $param) {
						$entry['callbacks'][] = array($event, array($key, $param));
					}
				} else {
					$entry['callbacks'][] = array($event, $params);
				}
			} else if (strpos($event, '-') !== false) {
				list($process, $method) = explode('-', $event, 2);

				if ($object = $this->getProcess($process)) {
					if (method_exists($object, $method)) {
						$entry = array('object' => $object, 'callbacks' => array(array($method, $params)));
					}
				}
			} else {
				$parts = explode('.', $event);
				$type   = array_shift($parts);

				switch ($type) {
					case 'do' :
						$command = strtolower(array_shift($parts));

						switch ($command) {
							case 'config' :
							case 'backup' :
							case 'models' :
								$method = $type . ucfirst($command);
								$params = array($params, $extra);
								$entry  = array('object' => __CLASS__, 'callbacks' => array(array($method, $params)));
								break;
						}
						break;
					case 'process' :
						if (is_object($extra)) {
							$class = $extra;
						} else if (is_array($extra)) {
							$class = Library::factoryByParams(implode('.', $parts), $extra);
						} else {
							$class = Library::factory(implode('.', $parts));
						}

						$entry = array('object' => $class, 'callbacks' => array());

						foreach ($params as $key => $param) {
							$entry['callbacks'][] = array($key, $param);
						}
						
						$this->processes[implode('.', $parts)] = $entry;
						break;
					case 'chain' :
						if (is_object($extra)) {
							$entry = array('node' => $extra);
							
							foreach ($params as $key => $param) {
								if (is_integer($key)) {
									$paras = array();
								} else {
									$paras = $param;
									$param = $key;
								}
								
								$entry['chain'][] = array($param, $paras);
							}
						} else {
							throw Core::error('mvc.view.helper.install.chain-must-be-object', $extra);
						}
				}
			}

			if (is_string($extra) && !empty($extra)) {
				$entry['store'] = $extra;
			}

			if (!empty($entry)) {
				$this->events[] = $entry;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $data (Array, required)
		 */
		private function arrayFilter(array $data)
		{
			$filtered = array();

			foreach ($data as $key => $value) {
				if (is_array($value)) {
					$filtered[$key] = $this->arrayFilter($value);
				} else if (is_string($value)) {
					$filtered[$key] = $this->filter($value);
				} else {
					$filtered[$key] = $value;
				}
			}

			return $filtered;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $data (required)
		 */
		private function filter($data)
		{
			$tmp    = $data;
			$rules  = array(
				'form-valid-' => $this->form->getValidValues(),
				'store-'      => $this->getTmp('store', false)
			);

			if (is_string($data)) {
				foreach ($rules as $rule => $filter) {
					if (preg_match('/\[\%(.*)\%\]/', $data, $match)) {
						$data = str_replace(array('[%', '%]'), '', $data);
						$tmp = $match[1];
					}
					
					if (strpos($tmp, $rule) !== false) {
						$id = str_replace($rule, '', $tmp);
						
						if (array_key_exists($id, $filter)) {
							if (is_string($filter[$id])) {
								return str_replace($rule . $id, $filter[$id], $data);
							} else {
								return $filter[$id];							
							}
						}
					}
				}
			}

			return $data;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $params (Array, required)
		 * @param    $extra (required)
		 */
		public function doConfig(array $params, $extra)
		{
			$hydrator = Library::factory('storage.config.hydrator');
			$config   = Library::factory('storage.config', $this->tmp);
			$result   = $config->config->changeValue($params, $extra);
			
			$hydrator->write($this->tmpFile, $config);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $params (Array, required)
		 * @param    $extra (required)
		 */
		public function doBackup(array $params, $extra)
		{
			// @TODO: Database + Config backup with Archive module, to zip, gz and so on ...
			echo 'createBackup';
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $params (Array, required)
		 * @param    $extra (required)
		 */
		public function doModels(array $params, $extra)
		{
			$controller = $this->view->getController();
			$model      = $controller->getModel($extra);
			$generator  = $model->getGenerator();
			
			call_user_func_array(array($generator, 'generate'), $params);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $action (required)
		 */
		private function runActions($action)
		{			
			if (array_key_exists($action, $this->actions)) {
				foreach ($this->actions[$action] as $callback) {
					$params = array_pop($callback);

					if (is_callable($callback)) {
						call_user_func_array($callback, $params);
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 */
		private function runEvents()
		{
			foreach ($this->events as $event) {
				if (isset($event['callbacks'])) {
					foreach ($event['callbacks'] as $callback) {
						$params = $this->arrayFilter(array_pop($callback));

						array_unshift($callback, $event['object']);

						if (is_callable($callback)) {
							if (isset($event['store'])) {
								$this->store($event['store'], call_user_func_array($callback, $params));
							} else {
								call_user_func_array($callback, $params);
							}
						}
					}
				} elseif (isset($event['chain'])) {
					$node = $event['node'];
					
					foreach ($event['chain'] as $chain) {
						$params = $this->arrayFilter(array_pop($chain));
						array_unshift($chain, $node);
						
						if (is_callable($chain)) {
							$node = call_user_func_array($chain, $params);
						}
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $storage (required)
		 * @param    $data (required)
		 */
		public function store($storage, $data)
		{
			$hydrator = Library::factory('storage.config.hydrator');
			$config   = Library::factory('storage.config', $this->tmp);
			
			if (!array_key_exists($storage, $this->tmp['store'])) {
				$this->tmp['store'][$storage] = $data;
			} else if ($this->options['storeReplace']) {
				$this->tmp['store'][$storage] = $data;
			}
			
			$hydrator->write($this->tmpFile, $this->tmp);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $type (optional)
		 * @param    $asConfig (optional)
		 */
		public function getTmp($type = null, $asConfig = true)
		{
			switch ($type) {
				case 'backup' :
					break;
				default       :
				case 'config' :
				case 'store'  :
					return $asConfig ? Library::factory('storage.config', $this->tmp[$type]) : $this->tmp[$type];
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $data (Array, required)
		 */
		public function getDSN(array $data)
		{
			return Model::DsnToString($data);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $dsn (required)
		 */
		public function checkDB($dsn)
		{
			try {
				$controller  = $this->view->getController();
				$this->model = $controller->getModel($dsn);
			} catch (Error $e) {
				throw $e;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clear()
		{			
			if (is_writeable($this->tmpFile)){
				unlink($this->tmpFile);			
			} else {				
				@chmod($this->tmpFile, 0666);				
				unlink($this->tmpFile);
			}
			
			$this->tmp    = array('config' => array());
			$this->config = array();
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $input (Array, required)
		 * @param    $template (optional)
		 * @param    $layout (optional)
		 */
		public function run(array $input, $template = null, $layout = null)
		{
			if (!empty($layout)) {
				$this->view->setLayout($layout);
			}

			if ($this->form->isValid($input)) {
				try {
					$this->runEvents($this->form->getValidValues());
					$this->runActions('success');
				} catch (Error $e) {
					$this->runActions('error');
					$this->form->processError($e);
					$this->view->form = $this->form;
					return $this->view->render($template);
				}
			} else {
				$this->runActions('invalid');
				$this->view->form = $this->form;
				return $this->view->render($template);
			}
		}
	}
?>