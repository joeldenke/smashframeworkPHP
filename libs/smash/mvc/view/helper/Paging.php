<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	/**
	 * Description goes here ...
	 * 
	 * @package   Smash_Mvc_View_Helper_Paging
	 * @author    Joel Denke <mail@happyness.se>
	 * @license   http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Smash_Mvc_View_Helper_Paging
	{
		private $page   = 1;
		private $rows   = null;
		private $limit  = null;
		
		private $total  = null;
		private $offset = 0;
		
		private $next     = null;
		private $previous = null;
		private $links    = array();
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $rows (required)
		 * @param    $limit (required)
		 * @param    $page (required)
		 */
		public function __construct($rows, $limit, $page)
		{
			if (is_int($rows) && $rows >= 0) {
				$this->rows = $rows;
			} else {
				throw Smash::error('Antal rader m�ste vara ett positivt heltal', null, $this);
			}
			if (is_int($limit) && $limit > 0) {
				$this->limit = $limit;
			} else {
				throw Smash::error('Begr�nsning av antal per sida m�ste vara ett heltal och > 0', null, $this);
			}
			if (!$page = intval($page)) {
				throw Smash::error('Sidnummer m�ste vara ett heltal', null, $this);
			} else {
				$this->page = $page;
			}
			
			$this->offset = (($this->page * $this->limit) - $this->limit);
			$this->total  = ceil($this->rows / $this->limit);
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function offset()
		{
			return $this->offset;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function limit()
		{
			return $this->limit;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function previous()
		{
			return $this->previous;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function next()
		{
			return $this->next;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function total()
		{
			return $this->total;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function current()
		{
			return $this->page;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isNext()
		{
			if ($this->page < $this->total) {
				$this->next = ($this->page + 1);
				return true;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isPrev()
		{
			if ($this->page > 1) {
				$this->previous = ($this->page - 1);
				return true;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $min (required)
		 * @param    $next (required)
		 * @param    $previous (required)
		 */
		public function pages($min = 10, $next, $previous)
		{
			if ($this->isPrev()) {
				$this->links[] = array('id' => $this->previous(), 'tag' => $previous[1]);
				$this->links[] = array('id' => 1, 'tag' => '[ F�rsta ]');
			}
			
			$count  = 0;
			$countb = 0;
			
			for ($i = 1; $i <= $this->total(); $i++) {
		    	if ($i == $this->current()) {
		        	$this->links[] = array('id' => $i, 'tag' => "<strong>$i</strong>");
		        } else if ($this->total() > $min) {
		    		if ($this->current() > 4 && $i > 3 && $i < ($this->current() - 1) && $i < ($this->total() - 3)) {
		            	$count++;
		            	($count == 1) ? $this->links[] = array('id' => $i, 'tag' => '... ') : null;
		        	} else if ($i > ($this->current() + 2) && $i < ($this->total() - 2)) {
		        		$countb++;
		            	($countb == 1) ? $this->links[] = array('id' => $i, 'tag' => '... ') : null;
		            } else {
		            	$this->links[] = array('id' => $i, 'tag' => $i);
		        	}
		        } else {
		        	$this->links[] = array('id' => $i, 'tag' => $i);
		        	if ($i < $this->total()){
		        		$this -> pages .= " ";
		        	}
		        }
		    }
			
			if ($this->isNext()) {
				$this->links[] = array('id' => $this->total(), 'tag' => '[ Sista ]');
				$this->links[] = array('id' => $this->next(), 'tag' => $next[1]);
			}
			
			return $this->links;
		}
	}
?>