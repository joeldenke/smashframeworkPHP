<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper;

	use	Smash\Library,
		Smash\Core,
		Smash\Error,
		Smash\Mvc\View;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Helper
	 * @uses         Smash\Library,  Smash\Core,  Smash\Error,  Smash\Mvc\View
	 * @interfaces   Smash\Mvc\View\Helper\Surface
	 * @package      Menu
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Menu implements Surface
	{
		protected $controller;
		protected $module;
		protected $route;
		protected $path;
		protected $view;
		protected $filter = array('index', 'error');
		protected $layout = array(
			'tree'   => '%indent%<ul%class%>',
			'parent' => '%indent%<h5><li%class%><a href="%url%">%title%</a></li></h5>',
			'node'   => '%indent%<li%class%><a href="%url%">%title%</a></li>',
		);
		protected $user = array(
			'class' => '',
			'properties' => ''
		);
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $view (Smash\Mvc\View Object, required)
		 */
		public function setView(View $view)
		{
			$this->view       = $view;
			$this->controller = $view->getController();
			
			$this->module     = $this->controller->getModule();
			$this->route      = $this->controller->getRoute(null);
			$this->path       = $this->module->getPath('controller',
								array('controller' => $this->controller->getRoute('module')));
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (required)
		 */
		public function getIterator($path)
		{
			if ($path !== false) {
				if (is_readable($path)) {
					$iterator = new \DirectoryIterator($path);
				} else {
					throw Core::error('file.not-readable', array('path' => $path));
				}
			} else {
				$iterator = new \DirectoryIterator($this->path);
			}
			
			return $iterator;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (optional)
		 */
		public function getNode($path = false)
		{
			$iterator = $this->getIterator($path);
			$node     = array();
			$module   = $this->controller->getRoute('module');
			
			foreach ($iterator as $item) {
				if ($item->isFile()) {
					$info = pathinfo($item->getPathName());
					$type = strtolower($info['extension']);
					$name = strtolower($info['filename']);
					
					if (!in_array($name, $this->filter)) {
						if ($type === 'php') {
							if (empty($module)) {
								$module = '';
							} else {
								$module = '/'.$module;
							}
							
							$node[$name] = $module.'/'.$name;
						}
					}
				}
			}
			
			return $node;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $type (required)
		 * @param    $data (Array, required)
		 */
		public function printLayout($type, array $data)
		{
			if (isset($this->layout[$type])) {
				$label  = $this->layout[$type];
				$values = array_merge($data, $this->user);
				
				foreach ($values as $key => $value) {
					if (strpos($label, "%$key%") !== false) {
						$label = str_replace("%$key%", $value, $label);
					}
				}
				
				echo $label . Core::CRLF;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $tree (required)
		 * @param    $indent (optional)
		 * @param    $deep (optional)
		 * @param    $node (optional)
		 */
		public function printTree($tree, $indent = 0, $deep = 0, $node = '')
		{
			if (!is_array($tree)) {
				$tree = $this->getTree($tree);
			}
			
			$r    = Library::dependecy('mvc.controller.request');
			$host = $r->getHost();
			
			$this->printLayout('tree', array(
				'indent' => str_repeat("\t", $indent),
				'level'  => $deep
			));
			
			foreach ($tree as $key => $leaves) {
				if (is_array($leaves)) {
					$this->printLayout('parent', array(
						'indent' => str_repeat("\t", $indent+1),
						'url'    => rtrim($host, Core::DS).'/'.$key,
						'title'  => ucfirst($key),
						'level'  => $deep
					));
					$this->printTree($leaves, $indent+1, $deep+1, $key);
				} else {
					$needle = empty($node) ? '' : '/'. $node;
					$this->printLayout('node', array(
						'indent' => str_repeat("\t", $indent+1),
						'url'    => rtrim($host, Core::DS).$needle.'/'.$leaves,
						'title'  => ucfirst($leaves),
						'level'  => $deep
					));
				}
			}
			
			$this->printLayout('tree', array(
				'indent' => str_repeat("\t", $indent),
				'level'  => $deep
			));
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (optional)
		 * @param    $delim (optional)
		 * @param    $startPath (optional)
		 */
		public function getTree($path = false, $delim = '/', $startPath = false)
		{
			if ($path === false) {
				$path  = str_replace($delim, Core::DS, $this->module->getPath('controller', array('controller' => $this->controller->getRoute('module'))));
			}
			
			if ($startPath === false) {
				$startPath = $path;
			}
			
			$it = new \DirectoryIterator($path);
			$tree = array();
			
			foreach ($it as $key => $entry) {
				$title = ltrim(
						str_replace(array($startPath, Core::DS), array('', $delim), $entry->getPathname()),
						$delim);
				
				if ($entry->isDir() && !$entry->isDot()) {
					$tree[$title] = $this->getTree($entry->getPathname(), $delim, $startPath);
				} else if ($entry->isFile()) {
					$info = pathinfo($entry->getPathName());
					$type = strtolower($info['extension']);
					$name = strtolower($info['filename']);
					
					if (!in_array($name, $this->filter)) {
						if ($type === 'php') {
							$tree[] = strtolower($entry->getBasename('.php'));
						}
					}
				}
			}
			
			return $tree;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $path (optional)
		 * @param    $delim (optional)
		 */
		public function breadcrumbs($path = false, $delim = '/')
		{
			if ($path !== false) {
				$crumbs = explode($delim, $path);
			} else {
				$crumbs = $this->controller->getRoute();
			}
			
			$r           = Library::dependecy('mvc.controller.request');
			$var         = rtrim($r->getHost(), $delim);
			$breadcrumbs = array();
			
			array_unshift($crumbs, $var);

			foreach ($crumbs as $key => $crumb) {
				if ($key === 0) {
					$breadcrumbs[$key] = $var;
				} else if (in_array($crumb, $this->filter)) {
					continue;
				} else if (!empty($crumb) && !isset($breadcrumbs[$crumb])) {
					$var .= $delim . $crumb;
					$breadcrumbs[$crumb] = $var;
				}
			}

			return $breadcrumbs;
		}
	}
?>