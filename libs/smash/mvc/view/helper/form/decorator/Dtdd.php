<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper\Form\Decorator;

	use   	Smash\Core,
		Smash\Library,
		Smash\Mvc\View\Helper\Form,
		Smash\Mvc\View\Helper\Form\Decorator\Errors,
		Smash\Mvc\View\Helper\Form\Decorator,
		Smash\Mvc\View\Helper\Form\Element,
		Smash\Mvc\View\Helper\Form\Container;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\View\Helper\Form\Decorator
	 * @uses        Smash\Core,  Smash\Library,  Smash\Mvc\View\Helper\Form,  Smash\Mvc\View\Helper\Form\Decorator\Errors,  Smash\Mvc\View\Helper\Form\Decorator,  Smash\Mvc\View\Helper\Form\Element,  Smash\Mvc\View\Helper\Form\Container
	 * @extends     Smash\Mvc\View\Helper\Form\Decorator\Abstraction
	 * @package     Dtdd
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Dtdd extends Abstraction
	{
		private $name;
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (XMLWriter Object, required)
		 * @param    $decorator (required)
		 */
		public function processNext(\XMLWriter $xml, $decorator)
		{
			// $decorator->processNext($xml);
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (required)
		 * @param    $element (required)
		 */
		public function wrapElement($xml, $element)
		{
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $decorator (Smash\Mvc\View\Helper\Form\Decorator Object, required)
			 * @param    $element (required)
			 * @param    $attributes (Array, required)
			 * @param    $options (required)
			 * @param    $tag (optional)
			 */
			if ($element instanceof Element) {
				if ($element->offsetExists('label')) {
					$decorator = Library::factory('mvc.view.helper.form.decorator', $element->form);
					$decorator->decorate('dt', array(), array('mode' => Form::MODE_WRAP));
					$decorator->decorate($element->shift('label'));
					$decorator->process($xml);
				} else {
					$xml->startElement('dt');
					$xml->fullEndElement();
				}

				$element->unshift('dd', array(), array('mode' => Form::MODE_WRAP));
				
				//echo 'element: ';
				//print_r(array_keys($element->getArrayCopy()));
				
				$xml = $element->process($xml);
				
				// echo 'finished!';
			} else if ($element instanceof Container) {
				$elements = $element->getElements();
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $property (required)
				 */
				
				foreach ($elements as $object) {
					$this->wrapElement($xml, $object);
				}
			}
		}
	}
?>