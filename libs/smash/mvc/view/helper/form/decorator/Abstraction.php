<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper\Form\Decorator;

	use	Smash\Config,
		Smash\Core,
		Smash\Mvc\View\Helper\Form,
		Smash\Mvc\View\Helper\Form\Decorator;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\View\Helper\Form\Decorator
	 * @uses        Smash\Config,  Smash\Core,  Smash\Mvc\View\Helper\Form,  Smash\Mvc\View\Helper\Form\Decorator
	 * @package     Abstraction
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Abstraction
	{
		protected $options = array(
			'mode' => Form::MODE_APPEND,
			'data' => null,
			'html' => false
		);
		protected $data = array(
			'tag',
			'element',
			'decorator',
			'attributes'
		);

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decorator (Smash\Mvc\View\Helper\Form\Decorator Object, required)
		 * @param    $element (required)
		 * @param    $attributes (Array, required)
		 * @param    $options (required)
		 * @param    $tag (optional)
		 */
		public function setup(Decorator $decorator, $element, array $attributes, $options, $tag = null)
		{
			$this->decorator  = $decorator;
			$this->element   = $element;
			$this->attributes = $attributes;

			if (!empty($tag)) {
				$this->tag = $tag;
			}

			if ($options instanceof Config) {
				$options = $options->asArray();
			}

			if (is_array($options)) {
				foreach ($options as $option => $value) {
					$this->options[$option] = $value;
				}
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $property (required)
		 */
		public function __get($property)
		{
			switch ($property) {
				case 'element'    :
				case 'decorator'  :
				case 'attributes' :
				case 'tag'        :
					return $this->data[$property];
					break;
				default :
					throw Core::error('Invalid decorator property');
					break;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $property (required)
		 * @param    $value (required)
		 */
		public function __set($property, $value)
		{
			switch ($property) {
				case 'element'    :
				case 'decorator'  :
				case 'attributes' :
				case 'tag'        :
					$this->data[$property] = $value;
					break;
				default :
					throw Core::error('Invalid decorator property');
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		public function change(array $attributes = array(), $options = null)
		{
			if (!empty($attributes)) {
				foreach ($attributes as $attribute => $value) {
					$this->data['attributes'][$attribute] = $value;
				}
			}

			if ($options instanceof Config) {
				$options = $options->asArray();
			}

			if (!empty($options) && is_array($options)) {
				foreach ($options as $option => $value) {
					if (isset($this->options[$option])) {
						$this->options[$option] = $value;
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 * @param    $default (optional)
		 */
		public function getOption($option, $default = null)
		{
			if (isset($this->options[$option])) {
				return $this->options[$option];
			} else {
				return $default;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (XMLWriter Object, required)
		 * @param    $content (required)
		 */
		public function processContent(\XMLWriter $xml, $content)
		{
			if (is_array($content)) {
				foreach ($content as $key => $value) {
					$xml->startElement($value['tag']);
					
					if (isset($value['attributes'])) {
						$this->decorator->writeAttributes($xml, $value['attributes']);
					}
					
					if (is_array($value['data'])) {
						$this->processContent($xml, $value['data']);
					} else {
						$xml->writeRaw($value['data']);
					}
					
					$xml->endElement();
				}
			} else if (is_string($content)) {
				$xml->writeRaw($content);
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (XMLWriter Object, required)
		 * @param    $decorator (required)
		 */
		public function processNext(\XMLWriter $xml, $decorator)
		{			
			$mode    = $this->getOption('mode');
			$content = $this->getOption('data');
			$form    = $this->decorator->form;
			
			if ($mode == Form::MODE_PREPEND) {
				$decorator->processNext($xml, $decorator);
			}
			
			$xml->startElement($this->tag);
			$decorator->writeAttributes($xml, $this->attributes);
			
			if ($mode == Form::MODE_WRAP) {
				$decorator->processNext($xml, $decorator);
				$xml->endElement();
			} else {
				if (!empty($content)) {
					$this->processContent($xml, $content);
				}
				
				$xml->endElement();
			}
			
			if ($mode == Form::MODE_APPEND) {
				$decorator->processNext($xml, $decorator);
			}
		}
	}
?>