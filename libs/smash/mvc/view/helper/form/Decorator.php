<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper\Form;

	use	Smash\Library,
		Smash\Core,
		Smash\Error,
		Smash\Mvc\View\Helper\Form,
		Smash\Mvc\View\Helper\Form\Decorator\Abstraction,
		Smash\Inflector;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Helper\Form
	 * @uses         Smash\Library,  Smash\Core,  Smash\Error,  Smash\Mvc\View\Helper\Form,  Smash\Mvc\View\Helper\Form\Decorator\Abstraction,  Smash\Inflector
	 * @extends      ArrayIterator
	 * @interfaces   Countable, Serializable, SeekableIterator, ArrayAccess, Traversable, Iterator
	 * @package      Decorator
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Decorator extends \ArrayIterator
	{
		private $data = array(
			'form',
			'name',
			'element',
			'wrapper',
			'xml'
		);

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $form (Smash\Mvc\View\Helper\Form Object, required)
		 * @param    $element (optional)
		 * @param    $name (optional)
		 */
		public function __construct(Form $form, $element = null, $name = null)
		{
			$this->name    = $name;
			$this->form    = $form;
			$this->element = $element;
			
			$this->xml = new \XMLWriter;
			$this->xml->openMemory();
			$this->xml->setIndent(true);
			$this->xml->setIndentString($form->options['indentation']);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decorator (required)
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		public function decorate($decorator, array $attributes = array(), $options = null)
		{
			$object = $this->getDecorator($decorator, $attributes, $options);
			$this->offsetSet(strtolower($object->tag), $object);
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decorator (required)
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		public function getDecorator($decorator, array $attributes = array(), $options = null)
		{
			if ($decorator instanceof Abstraction) {
				return $decorator;
			} else {
				if (is_readable(dirname(__FILE__) . Inflector::classyfile('-decorator-'. $decorator))) {
					$object = Library::factory('mvc.view.helper.form.decorator.'. $decorator);
				} else {
					$object = Library::factory('mvc.view.helper.form.decorator.abstraction');
				}

				$object->setup($this, $this->element, $attributes, $options, $decorator);
				
				return $object;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 */
		public function shift($name)
		{
			if ($this->offsetExists($name)) {
				$decoration = $this->offsetGet($name);
				$this->offsetUnset($name);
				return $decoration;
			} else {
				return false;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decorator (required)
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		public function unshift($decorator, array $attributes = array(), $options = null)
		{
			$object = $this->getDecorator($decorator, $attributes, $options);
			parent::__construct(array_merge(array(strtolower($object->tag) => $object), $this->getArrayCopy()));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		public function change($name, array $attributes = array(), $options = null)
		{
			if ($this->offsetExists($name)) {
				$decoration = $this->offsetGet($name);
				$decoration->change($attributes, $options);
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $in (required)
		 */
		public function escape($in)
		{
			$out = array();

			if (is_array($in) && !empty($in)) {
				foreach ($in as $key => $value) {
					if (is_string($key)) {
						$out[$this->escape($key)] = $this->escape($value);
					} else if (is_int($key)) {
						$out[$key] = $this->escape($value);
					}
				}
			} elseif(is_string($in)) {
				if (mb_detect_encoding($in, 'UTF-8, ISO-8859-1') !== 'UTF-8') {
					return utf8_encode($in);
				} else {
					return $in;
				}
			} else {
				return $in;
			}

			return $out;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $property (required)
		 */
		public function __get($property)
		{
			switch ($property) {
				case 'form'    :
				case 'name'    :
				case 'element' :
				case 'wrapper' :
				case 'xml'     :
					return $this->data[$property];
					break;
				default :
					throw Core::error('Invalid decorator property');
					break;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $property (required)
		 * @param    $value (required)
		 */
		public function __set($property, $value)
		{
			switch ($property) {
				case 'form'    :
				case 'name'    :
				case 'element' :
				case 'wrapper' :
				case 'xml'     :
					$this->data[$property] = $value;
					break;
				default :
					throw Core::error('Invalid decorator property');
					break;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (optional)
		 */
		public function process($xml = null)
		{
			$this->rewind();
			
			if ($this->offsetExists('dtdd')) {
				$this->wrapper = $this->shift('dtdd');
			}
			
			if (!$xml instanceof \XMLWriter) {
				$xml = $this->xml;
			}
			
			return $this->processNext($xml);
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (XMLWriter Object, required)
		 */
		public function processNext(\XMLWriter $xml)
		{
			if ($this->valid()) {
				$decorator = $this->current();
				$this->next();
				
				$decorator->processNext($xml, $this);
			}
			
			return $xml;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (XMLWriter Object, required)
		 * @param    $attributes (Array, required)
		 */
		public function writeAttributes(\XMLWriter $xml, array $attributes)
		{
			$attributes = $this->escape($attributes);
			
			foreach ($attributes as $attribute => $value) {
				$xml->writeAttribute($attribute, $value);
			}		
		}
	}
?>