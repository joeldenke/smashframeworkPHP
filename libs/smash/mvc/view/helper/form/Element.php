<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper\Form;

	use	Smash\Library,
		Smash\Core,
		Smash\Error,
		Smash\Mvc\View\Helper\Form,
		Smash\Inflector,
		Smash\Validate;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Helper\Form
	 * @uses         Smash\Library,  Smash\Core,  Smash\Error,  Smash\Mvc\View\Helper\Form,  Smash\Inflector,  Smash\Validate
	 * @extends      Smash\Mvc\View\Helper\Form\Decorator
	 * @interfaces   Iterator, Traversable, ArrayAccess, SeekableIterator, Serializable, Countable
	 * @package      Element
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Element extends Decorator
	{
		private $form;
		private $element;
		private $label;
		private $content;
		private $attributes;
		private $validator;

		private $options = array(
			'order' => 0,
			'required' => false,
			'label'  => true,
			'html'   => true,
		);

		private $errors = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $form (Smash\Mvc\View\Helper\Form Object, required)
		 * @param    $element (required)
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 * @param    $options (Array, required)
		 */
		public function __construct(Form $form, $element, $name, array $attributes, array $options)
		{
			parent::__construct($form, $this, $name);

			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $decorator (required)
			 * @param    $attributes (Array)
			 * @param    $options (optional)
			 */
			if (strpos($element, '.') !== false) {
				list($element, $type) = explode('.', $element, 2);

				if (!isset($attributes['type'])) {
					$attributes['type'] = $type;
				}
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $decorator (required)
			 * @param    $attributes (Array)
			 * @param    $options (optional)
			 */
			}

			$this->element = $element;

			if (!empty($options)) {
				foreach ($options as $key => $option) {
					switch ($key) {
						case 'order' :
							if (is_int($option)) {
								$this->options[$key] = $option;
							}
							break;
						case 'label' :
						case 'required' :
						case 'html'     :
							if (is_bool($option)) {
								$this->options[$key] = $option;
							/**
							 * Description goes here ...
							 * 
							 * @access   public
							 * @param    $name (required)
							 */
							}
							break;
					}
				}
			}

			if (isset($attributes['label'])) {
				if ($this->options['required'] === true) {
					$attributes['label'] .= ' *';
				}

				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $decorator (required)
				 * @param    $attributes (Array)
				 * @param    $options (optional)
				 */
				$attributes['id']      = $name;
				$attributes['label'] .= ' : ';
				$this->decorate('label', array('for' => $name), array('data' => $attributes['label']));
				unset($attributes['label']);
			}

			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $name (required)
			 * @param    $attributes (Array)
			 * @param    $options (optional)
			 */
			switch ($element) {
				case 'input'    :
				case 'textarea' :
					$this->$element($name, $attributes);
					break;
				case 'select'   :
					$this->$element($name, $attributes, $options);
					break;
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $in (required)
				 */
				case 'submit'   :
				case 'cancel'   :
				case 'reset'    :
					$this->actionButton($name, $attributes);
					break;
				case 'radio'    :
				case 'check'    :
				case 'checkbox' :
					$this->choiceBox($name, $attributes);
					break;
				default :
					throw Core::error('Wrong type');
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOrder()
		{
			return (int) $this->options['order'];
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $validator (required)
		 * @param    $params (Array)
		 */
		public function addRule($validator, array $params = array())
		{
			if (!$this->validator instanceof Validate) {
				$this->validator = Library::factory('validate');
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $property (required)
			 */
			}

			$this->validator->add($validator, $params);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isRequired()
		{
			return $this->options['required'];
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $value (required)
		 * @param    $key (optional)
		 */
		public function changeValue($value, $key = false)
		{
			switch ($this->element) {
				case 'input' :
					$this->change($this->element, array('value' => $value));
					break;
				/**
				 * Description goes here ...
				 * 
				 * @access   public
				 * @param    $property (required)
				 * @param    $value (required)
				 */
				case 'textarea' :
					if (empty($value)) $value = ' ';
					$this->change($this->element, array(), array('data' => $value));
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $input (Array, required)
		 */
		public function validate(array $input)
		{
			$name = $this->name;

			if (array_key_exists($name, $input)) {
				$value = $input[$name];
			} else if ($this->options['required']) {
				$this->errors[] = Core::error('mvc.view.helper.form-field-required', array('name' => $name), Error::CODE_MVC);
				return false;
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $xml (optional)
			 */
			}

			if ($this->validator instanceof Validate) {
				if (!$this->validator->validate($value)) {
					return $this->validator;
				}
			}

			return true;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isError()
		{
			return (count($this->errors) > 0) ? true : false;
		}
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $xml (XMLWriter Object, required)
 */

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $attributes (Array, required)
		 */
		public function setAttributes(array $attributes)
		{
			$sorted = array();
			$order  = array('action', 'method', 'type', 'id', 'name', 'value', 'src', 'size', 'maxlength', 'rows', 'cols',
						   'accept', 'tabindex', 'accesskey', 'align', 'alt', 'title', 'class', 'style', 'selected', 'checked','readonly', 'disabled');

			foreach ($order as $key) {
				if (isset($attributes[$key])) {
					$sorted[$key] = $attributes[$key];
				}
			}
/**
 * Description goes here ...
 * 
 * @access   public
 * @param    $xml (XMLWriter Object, required)
 * @param    $attributes (Array, required)
 */

			$this->attributes = $sorted;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 */
		public function input($name, array $attributes)
		{
			$attributes['name'] = $name;
			$this->setAttributes($attributes);
			$this->decorate('input', $attributes);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 */
		public function textarea($name, array $attributes)
		{
			$attributes['name'] = $name;

			if (!isset($attributes['rows'])) {
				$attributes['rows'] = 2;
			}

			if (!isset($attributes['cols'])) {
				$attributes['cols'] = 20;
			}

			if (isset($attributes['value'])) {
				$this->content = $attributes['value'];
				unset($attributes['value']);
			}

			if (empty($this->content)) {
				$this->content = ' ';
			}

			$this->setAttributes($attributes);
			$this->decorate($this->element, $attributes, array('data' => $this->content));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 */
		public function choiceBox($name, array $attributes)
		{
			if (isset($attributes['checked']) && $attributes['checked'] == true) {
				$attributes['checked'] = 'checked';
			} else {
				unset($attributes['checked']);
			}

			switch ($this->element) {
				case 'radio' :
					$attributes['type'] = $this->element;
					break;
				case 'check' :
				case 'checkbox' :
					$attributes['type'] = 'checkbox';
					break;

			}

			$this->input($name, $attributes);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 */
		public function actionButton($name, array $attributes)
		{
			switch ($this->element) {
				case 'submit' :
					$attributes['type'] = $this->element;
					break;
				case 'cancel' :
				case 'reset'  :
					$attributes['type'] = 'reset';
					break;

			}

			$this->input($name, $attributes);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $attributes (Array, required)
		 * @param    $options (Array)
		 */
		public function select($name, array $attributes, array $options = array())
		{
			$selected = null;
			$attributes['name'] = $name;

			if (isset($attributes['options'])) {
				$options = $attributes['options'];
				unset($attributes['options']);
			}

			if (isset($attributes['selected'])) {
				$selected = $attributes['selected'];
				unset($attributes['selected']);
			}

			if (is_array($selected)) {
				$attributes['multiple'] = 'multiple';
			} else {
				$selected = array($selected);
			}

			$data = $this->selectOptions($options, $selected);
			$this->setAttributes($attributes);
			$this->decorate($this->element, $attributes, array('mode' => Form::MODE_PREPEND, 'data' => $data));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (Array, required)
		 * @param    $selected (Array, required)
		 */
		public function selectOptions(array $options, array $selected)
		{
			$fields = array();

			foreach ($options as $option => $value) {
				$option     = (string) $option;
				$attributes = array('value' => $option);

				if (is_array($value)) {
					$groups = array();

					foreach ($value as $key => $label) {
						$key     = (string) $key;
						$optAttr = array('value' => $key);

						if (in_array($key, $selected)) $optAttr['selected'] = 'selected';
						$groups[] = array('tag' => 'option', 'data' => $label, 'attributes' => $optAttr);
					}

					$fields[] = array('tag' => 'optgroup', 'data' => $groups, 'attributes' => array('label' => $option));
				} else {
					if (in_array($option, $selected)) $attributes['selected'] = 'selected';
					$fields[] = array('tag' => 'option', 'data' => $value, 'attributes' => $attributes);
				}
			}

			return $fields;
		}
	}
?>