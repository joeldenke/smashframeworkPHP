<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\View\Helper\Form;
	use Smash\Mvc\View\Helper\Form;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\View\Helper\Form
	 * @uses         Smash\Mvc\View\Helper\Form
	 * @extends      Smash\Mvc\View\Helper\Form\Decorator
	 * @interfaces   Iterator, Traversable, ArrayAccess, SeekableIterator, Serializable, Countable
	 * @package      Container
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Container extends Decorator
	{
		private $name;
		private $order;
		private $decorator;
		private $elements = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $form (Smash\Mvc\View\Helper\Form Object, required)
		 * @param    $name (required)
		 * @param    $elements (Array, required)
		 * @param    $order (required)
		 */
		public function __construct(Form $form, $name, array $elements, $order)
		{
			parent::__construct($form, $this, $name);

			$this->elements = $elements;
			$this->order       = $order;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decoration (required)
		 */
		public function decorateAll($decoration)
		{
			foreach ($this->elements as $name => $element) {
				$element->decorate($decoration);
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getElements()
		{
			return $this->elements;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOrder()
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $decorator (required)
		 * @param    $attributes (Array)
		 * @param    $options (optional)
		 */
		{
			return (int) $this->order;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $xml (optional)
		 */
		public function process($xml = null)
		{
			/**
			 * Description goes here ...
			 * 
			 * @access   public
			 * @param    $decorator (required)
			 * @param    $attributes (Array)
			 * @param    $options (optional)
			 */
			foreach ($this->elements as $name => $element) {
				$element->process($xml);
			}
		}
	}
?>