<?php/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Controller;	use	Smash\Mvc\View,		Smash\Core,		Smash\Module,		Smash\Storage\Filestream as Stream;	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Mvc\Controller
	 * @uses        Smash\Mvc\View,  Smash\Core,  Smash\Module,  Smash\Storage\Filestream as Stream
	 * @package     Resource
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Resource	{		protected $responseCode = 200;		protected $hasRedirect  = false;		protected $resources    = array();		protected $headers      = array();		protected $messages     = array(			100 => 'Continue',			101 => 'Switching Protocols',			102 => 'Processing',			200 => 'OK',			201 => 'Created',			202 => 'Accepted',			203 => 'Non-Authoritative Information',			204 => 'No Content',			205 => 'Reset Content',			206 => 'Partial Content',			207 => 'Multi-Status',			226 => 'IM Used',			300 => 'Multiple Choices',			301 => 'Moved Permanently',			302 => 'Found',			303 => 'See Other',			304 => 'Not Modified',			305 => 'Use Proxy',			306 => 'Reserved',			307 => 'Temporary Redirect',			400 => 'Bad Request',			401 => 'Unauthorized',			402 => 'Payment Required',			403 => 'Forbidden',			404 => 'Not Found',			405 => 'Method Not Allowed',			406 => 'Not Acceptable',			407 => 'Proxy Authentication Required',			408 => 'Request Timeout',			409 => 'Conflict',			410 => 'Gone',			411 => 'Length Required',			412 => 'Precondition Failed',			413 => 'Request Entity Too Large',			414 => 'Request-URI Too Long',			415 => 'Unsupported Media Type',			416 => 'Requested Range Not Satisfiable',			417 => 'Expectation Failed',			422 => 'Unprocessable Entity',			423 => 'Locked',			424 => 'Failed Dependency',			426 => 'Upgrade Required',			500 => 'Internal Server Error',			501 => 'Not Implemented',			502 => 'Bad Gateway',			503 => 'Service Unavailable',			504 => 'Gateway Timeout',			505 => 'HTTP Version Not Supported',			506 => 'Variant Also Negotiates',			507 => 'Insufficient Storage',			510 => 'Not Extended'		);				private $resourceType  = 'html';		private $acceptedMimes = array();		private $mimeTypes     = array(			'txt'   => 'text/plain',			'htm'   => 'text/html',			'html'  => 'text/html',					'xhtml' => 'application/xhtml+xml',			'php'   => 'text/html',			'css'   => 'text/css',			'js'    => 'application/javascript',					'rss'   => 'application/rss+xml',					'atom'  => 'application/atom+xml',			'json'  => 'application/json',			'xml'   => 'application/xml',			// images			'png' => 'image/png',			'jpe' => 'image/jpeg',			'jpeg' => 'image/jpeg',			'jpg' => 'image/jpeg',			'gif' => 'image/gif',			'bmp' => 'image/bmp',			'ico' => 'image/x-icon',			'tiff' => 'image/tiff',			'tif' => 'image/tiff',			'svg' => 'image/svg+xml',			'svgz' => 'image/svg+xml',			// archives			'zip' => 'application/zip',					'gz'  => 'application/x-gzip',					'tar' => 'application/x-tar',			'rar' => 'application/x-rar-compressed',			'exe' => 'application/x-msdownload',			'msi' => 'application/x-msdownload',			'cab' => 'application/vnd.ms-cab-compressed',			// audio/video			'mp3' => 'audio/mpeg',			'qt' => 'video/quicktime',			'mov' => 'video/quicktime',					'avi'  => 'video/mpeg',					'mpeg' => 'video/mpeg',					'mpg'  => 'video/mpeg',			// adobe			'pdf' => 'application/pdf',			'psd' => 'image/vnd.adobe.photoshop',			'ai' => 'application/postscript',			'eps' => 'application/postscript',			'ps' => 'application/postscript',			// ms office			'doc' => 'application/msword',			'rtf' => 'application/rtf',			'xls' => 'application/vnd.ms-excel',			'ppt' => 'application/vnd.ms-powerpoint',			// open office			'odt' => 'application/vnd.oasis.opendocument.text',			'ods' => 'application/vnd.oasis.opendocument.spreadsheet'		);		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $module (Smash\Module Object, required)
		 */
		public function __construct(Module $module)		{			$this->module  = $module;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getModule()		{			return $this->module;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $mime (required)
		 */
		public function isAcceptedMime($mime)		{			$mimes = $this->getAcceptedMimes();			return in_array($mime, $mimes);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getAcceptedMimes()		{			if (!empty($this->acceptedMimes)) {				return $this->acceptedMimes;			}			$acceptable = $_SERVER['HTTP_ACCEPT'];			if (empty($acceptable)) {				return array();			} else {				$values = array();				foreach (array_filter(explode(',', $acceptable)) as $value) {					// Cut off any q-value that might come after a semi-colon					if ($pos = strpos($value, ';')) {						$q     = (float) trim(substr($value, $pos + 3));						$value = trim(substr($value, 0, $pos));					} else {						$q = 1;					}					$values[$value] = $q;				}				arsort($values);		    	$this->acceptedMimes = array_keys($values);			}			return $this->acceptedMimes;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $resource (optional)
		 */
		public function getMimeType($resource = null)		{			if (empty($resource)) {				$resource = $this->resourceType;			} else if (is_string($resource) && is_file($resource)) {				$resource = pathinfo($resource, PATHINFO_EXTENSION);			}			return array_key_exists($resource, $this->mimeTypes) ? $this->mimeTypes[$resource] : 'text/html';		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $value (required)
		 * @param    $replace (optional)
		 */
		public function setHeader($name, $value, $replace = false)		{			if (!$this->canSendHeaders(false)) {				return $this;			}			if ($replace) {				foreach ($this->headers as $key => $header) {					if ($name == $header['name']) {						unset($this->headers[$key]);					}				}			}			$this->headers[] = array(			'name'    => $name,			'value'   => $value,			'replace' => $replace			);			return $this;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $url (required)
		 * @param    $code (optional)
		 */
		public function setRedirect($url, $code = 302)		{			$this->setHeader('Location', $url, true)			->setResponseCode($code);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isRedirect()		{			return $this->hasRedirect;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getHeaders()		{			return $this->headers;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clearHeaders()		{			$this->headers = array();			return $this;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $code (required)
		 */
		public function setResponseCode($code)		{			if (!is_int($code) || (100 > $code) || (599 < $code)) {				throw Core::error('Invalid HTTP response code: %code', 1004, array('code' => $code));			}			if ((300 <= $code) && (307 >= $code)) {				$this->hasRedirect = true;			} else {				$this->hasRedirect = false;			}			$this->responseCode = $code;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getResponseCode()		{			return $this->responseCode;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $throw (optional)
		 */
		public function canSendHeaders($throw = false)		{			if (headers_sent($file, $line)) {				if ($throw) {					throw Core::error(						'Cannot send headers; headers already sent in %file, on line %line',						array('file' => $file, 'line' => $line)					);				} else {					return false;				}			} else {				return true;			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function statusMessage()		{			return isset($this->messages[$this->responseCode]) ? $this->messages[$this->responseCode] : 'Unknown';		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $resource (required)
		 */
		public function isResource($resource)		{			switch (true) {				case is_array($resource) :				case is_object($resource) :				case is_string($resource) :				case ($resource instanceof View) :					return true;					break;				default :					return false;					break;			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function hasResource()		{			return empty($this->resources) ? false : true;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $resource (required)
		 * @param    $mime (optional)
		 */
		public function addResource($resource, $mime = null)		{			if (is_string($resource)) {				$this->resourceType = empty($mime) ? $resource : $mime;			}			$this->setHeader('Content-Type', $this->getMimeType($this->resourceType), true);			$this->resources[] = $resource;			return $this;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getRepresentation()		{			$data = array();			foreach ($this->resources as $resource) {				if (is_array($resource)) {					$data[] = var_export($resource);				} else if ($resource instanceof View) {					$data[] = $resource->render();				} else if (is_string($resource)) {					if (Stream::exists($resource)) {						$data[] = file_get_contents($resource);					} else {						$data[] = $resource;					}				} else if (is_object($resource)) {					if (is_callable(array($resource, '__toString'))) {						$data[] = (string) $resource->__toString();					}				}			}			return implode('', $data);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $echo (optional)
		 */
		public function sendResponse($echo = false)		{			if (!in_array($_SERVER["SERVER_PROTOCOL"], array('HTTP/1.0','HTTP/1.1','HTTP/0.9'))) {				$this->responseCode = 505;			}						if (count($this->headers) || ($this->responseCode != 200)) {				if ($this->canSendHeaders(true)) {					$httpCodeSent = false;					foreach ($this->headers as $header) {						if (!$httpCodeSent && $this->responseCode) {							header($header['name'] . ': ' . $header['value'], $header['replace'], $this->responseCode);							$httpCodeSent = true;						} else {							header($header['name'] . ': ' . $header['value'], $header['replace']);						}					}					if (!$httpCodeSent) {						header($_SERVER['SERVER_PROTOCOL']. ' ' . $this->responseCode .' '. $this->statusMessage());						if (PHP_SAPI != 'cgi-fcgi') header('Status: ' . $this->responseCode .' '. $this->statusMessage());						$httpCodeSent = true;					}				}			}			if ($this->hasResource()) {				if ($echo === true) {					echo $this->getRepresentation();				} else {					return $this->getRepresentation();				}			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __toString()		{			ob_start();			$this->sendResponse();			return ob_get_clean();		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $url (required)
		 * @param    $options (Array)
		 */
		public function redirect($url, array $options = null)		{			// prevent header injections			$url  = str_replace(array("\n", "\r"), '', $url);			$exit = true;			$code = 302;			if (!empty($options)) {				if (isset($options['exit'])) {					$exit = $options['exit'] ? true : false;				}				if (isset($options['code'])) {					$code = $options['code'];				}			}			$this->setRedirect($url, $code);		}	}?>