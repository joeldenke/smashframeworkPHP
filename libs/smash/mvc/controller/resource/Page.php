<?php/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	/**
	 * Description goes here ...
	 * 
	 * @interfaces   Smash_Mvc_Controller_Resource_Interface
	 * @package      Smash_Mvc_Controller_Resource_Page
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Smash_Mvc_Controller_Resource_Page implements Smash_Mvc_Controller_Resource_Interface	{		protected $front;		protected $scaffold;		protected $output;				protected $params      = array();		protected $autoRender  = false;		protected $scaffolding = false;				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $front (required)
		 */
		public function __construct($front)		{			$this->front = $front;			$front->model->setFront($front);			$front->view->setFront($front)->init();						$this->autoRender($front->getOption('autoRender'));			$this->scaffolding($front->getOption('scaffolding'));		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $enable (optional)
		 */
		public function scaffolding($enable = null)		{			// Because of Smash_Serialize_Xml makes boolean to integer/string			if (is_string($enable) && ($enable === '1' || $enable === '0')) {				settype($enable, 'bool');			}						if (is_bool($enable)) {				$this->scaffolding = $enable;				return $this;			} else if (empty($enable)) {				return $this->scaffolding;			} else {				throw Smash::error('Must be either a boolean or an empty value', null, $this);			}		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $enable (optional)
		 */
		public function autoRender($enable = null)		{						// Because of Smash_Serialize_Xml makes boolean to integer/string			if (is_string($enable) && ($enable === '1' || $enable === '0')) {				settype($enable, 'bool');			}						if (is_bool($enable)) {				$this->autoRender = $enable;				return $this;			} else if (empty($enable)) {				return $this->autoRender;			} else {				throw Smash::error('Must be either a boolean or an empty value', null, $this);			}		}				// @TODO		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isResource()		{			return false;		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getFront()		{			return $this->front;		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getRenderer()		{			return $this->view->getRenderer();		}				/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $index (required)
		 * @param    $namespace (optional)
		 */
		final protected function setParam($index, $namespace = null)		{			return $this->request->setParam($index, $namespace);		}				/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $index (required)
		 * @param    $namespace (optional)
		 */
		final protected function getParam($index, $namespace = null)		{			return $this->request->getParam($index, $namespace);		}				/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $namespace (optional)
		 */
		final protected function getParams($namespace = null)		{			return $this->request->getParams($namespace);		}				/**
		 * Description goes here ...
		 * 
		 * @access   protected
		 * @param    $output (required)
		 */
		protected function setOutput($output)		{			$this->output = $output;			return $this;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOutput()		{			return $this->output;		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $value (required)
		 */
		public function __set($index, $value)		{			$this->getFront()->setContext($index, $value);			return $this;		}				/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function __get($index)		{			return $this->getFront()->getContext($index);		}	    	/**
	 * Description goes here ...
	 * 
	 * @access   public
	 * @param    $command (required)
	 */
	    public function fetch($command)	    {	    	if ($this->scaffolding) {	    		$this->scaffold = Smash_Object::factory('Smash_Mvc_Scaffold', $this, $command);		    			    	if ($this->scaffold->isMatch($command)) {		    		return $this->scaffold->scaffold($this->getFront());		    	}	    	}    		$obj = new ReflectionClass($this);    		    		if ($obj->hasMethod($command)) {				$this->init();				return call_user_func(array($this, $command));			} else {				throw Smash::error('The command %command() was not trapped within %class', null, $this, array('command' => $command, 'class' => $this));			}	    }	/**
	 * Description goes here ...
	 * 
	 * @access   final, public
	 * @param    $command (required)
	 */
	    final public function execute($command)	    {	    	try {				$output = $this->fetch($command);								if ($this->request->isRequest()) {					if ($this->autoRender() == true) {						$output = $this->view->render();					}										$this->setOutput($output);				}			} catch (Exception $e) {				throw $e;			}	    }				/**
		 * Description goes here ...
		 * 
		 * @access   final, public
		 */
		final public function process()		{			return $this->getOutput();		}	    	/**
	 * Description goes here ...
	 * 
	 * @access   final, protected
	 * @param    $command (required)
	 * @param    $page (optional)
	 * @param    $module (optional)
	 * @param    $params (Array)
	 */
	    final protected function forward($command, $page = null, $module = null, array $params = array())	    {	        $request  = $this->request;			$router   = $this->router;	        	        if (!empty($params)) {	        	foreach ($params as $param => $value) {	            	$request->setParam($param, $value);	        	}	        }	        	        if (!empty($page)) {	            $router->page = $page;	            	            if (!empty($module)) {	                $router->module = $module;	            }	        }	        	        $router->command = $command;	        $request->setRequest(false);	    }	    	/**
	 * Description goes here ...
	 * 
	 * @access   final, protected
	 * @param    $url (required)
	 * @param    $options (Array)
	 */
	    final protected function redirect($url, array $options = null)	    {	    	$this->response->redirect($url, $options);		}	}?>