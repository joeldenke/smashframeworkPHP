<?php/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Mvc\Controller;	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Mvc\Controller
	 * @extends      ArrayIterator
	 * @interfaces   Countable, Serializable, SeekableIterator, ArrayAccess, Traversable, Iterator
	 * @package      Request
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Request extends \ArrayIterator	{		protected $acceptedMimes = array();		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (optional)
		 */
		public function __construct($options = null)		{			if (!empty($options)) {				$this->setOptions($options);			}			parent::__construct(array());			$this->loadGlobalParams();		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $params (Array, required)
		 * @param    $namespace (optional)
		 */
		public function setParams(array $params, $namespace = null)		{			foreach ($params as $key => $param) {				$this->setParam($key, $param, $namespace);			}			return $this;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $value (required)
		 * @param    $namespace (optional)
		 */
		public function setParam($param, $value, $namespace = null)		{			$params = array();			if (empty($namespace)) {				if (!$this->offsetExists($param)) {					$this->offsetSet($param, $value);				}			} else {				if ($this->offsetExists($namespace)) {					$params = $this->offsetGet($namespace);					if (!array_key_exists($param, $params)) {						$params = $params + array($param => $value);						$this->offsetSet($namespace, $params);					}				}			}			return false;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $param (required)
		 * @param    $namespace (optional)
		 */
		public function getParam($param, $namespace = null)		{			$params = array();			if (empty($namespace)) {				if ($this->offsetExists($param)) {					return $this->offsetGet($param);				} else {					return false;				}			} else {				if ($this->offsetExists($namespace)) {					$params = $this->offsetGet($namespace);					if (array_key_exists($param, $params)) {						return $params[$param];					} else {						return false;					}				}			}			return false;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $namespace (optional)
		 */
		public function getParams($namespace = null)		{			$params = array();			if (!empty($namespace)) {				if ($this->offsetExists($namespace)) {					$params = $this->offsetGet($namespace);				}			} else {				$params = $this->getArrayCopy();			}			return $params;		}		/**
		 * Description goes here ...
		 * 
		 * @access   final, private
		 */
		final private function loadGlobalParams()		{			if (get_magic_quotes_gpc()) {				$_GET     = $this->stripslashesDeep((array) $_GET);				$_POST    = $this->stripslashesDeep((array) $_POST);				$_COOKIE  = $this->stripslashesDeep((array) $_COOKIE);		    }		    $globals = array(		    	'get'    => $_GET,		    	'post'   => $_POST,		    	'cookie' => $_COOKIE,		    	'server' => $_SERVER		    );			foreach ($globals as $namespace => $global) {				if (!empty($global)) {					$this->offsetSet($namespace, $global);				}				unset($global);			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   final, protected
		 * @param    $value (required)
		 */
		final protected function stripslashesDeep($value)		{			return is_array($value) ? array_map(array($this, 'stripslashesDeep'), $value) : stripslashes($value);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getUri()		{			if (!empty($_SERVER['HTTP_X_REWRITE_URL'])) {				$uri = $_SERVER['HTTP_X_REWRITE_URL'];			} else if (!empty($_SERVER['REQUEST_URI'])) {				$uri = $_SERVER['REQUEST_URI'];			} else if (!empty($_SERVER['ORIG_PATH_INFO'])) {				$uri = $_SERVER['ORIG_PATH_INFO'];			} else if (!empty($_SERVER['PHP_SELF'])) {				$uri = $_SERVER['PHP_SELF'];			} else {				$uri = null;			}			if (!empty($_SERVER['QUERY_STRING'])) {				$uri = str_replace('?'. $_SERVER['QUERY_STRING'], '', $uri);			}						$uri = str_replace($_SERVER['SCRIPT_NAME'], '', $uri);						return trim($uri, '/');		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getUrl()		{			return $this->getHost() . $this->getUri();		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function haveSSL()		{			$https = strtolower($this->getServer('HTTPS'));			$proto = strtolower($this->getServer('HTTP_X_FORWARDED_PROTO'));			return ($https == 'on' || $proto == 'https') ? true : false;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $uri (required)
		 */
		public function isAbsolute($uri)		{			return preg_match('/^(http\:|https\:)/', $uri);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getScheme()		{			if ($this->haveSSL()) {				return 'https://';			} else {				return 'http://';			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $absolute (optional)
		 */
		public function getHost($absolute = true)		{			$forwardHost = $this->getServer('HTTP_X_FORWARDED_HOST');			$defaultHost = $this->getServer('HTTP_HOST');			if (!empty($forwardHost)) {				$host = $forwardHost;			} else if (!empty($defaultHost)) {				$host = $defaultHost;			} else {				return null;			}			if ($absolute && $this->isAbsolute($host)) {				return rtrim($host, '/');			} else if ($absolute) {				return $this->getScheme() . rtrim($host, '/');			} else {				return rtrim($host, '/');			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $proxy (optional)
		 */
		public function getIP($proxy = true)		{			if ($proxy) {				return $this->getServer(array('http.client.ip', 'http.x.forwarded.for', 'remote.addr'), 'unknown', true);			} else {				return $this->getServer('remote.addr', 'unknown');			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getReferer()		{			$referer = $this->getServer('HTTP_REFERER');		    return empty($referer) ? null : $referer;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getScriptName()		{			$script     = $this->getServer('SCRIPT_NAME');			$origScript = $this->getServer('ORIG_SCRIPT_NAME');		    return empty($script) ? (empty($origScript) ? null : $origScript) : $script;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getMethodName()		{			$method = $this->getServer('REQUEST_METHOD');		    return empty($method) ? 'GET' : $method;		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (optional)
		 * @param    $default (optional)
		 */
		public function getQuery($index = null, $default = null)		{			if (is_null($index)) {				return $this->getParams('get');			} else {				$param = $this->getParam($index, 'get');				return empty($param) ? $default : $$param;			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $value (required)
		 */
		public function setPost($index, $value)		{			$this->setParam($index, $value, 'post');		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (optional)
		 * @param    $default (optional)
		 */
		public function getPost($index = null, $default = null)		{			if (empty($index)) {				return $this->getParams('post');			} else {				$value = $this->getParam($index, 'post');				return $value === false ? $default : $value;			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (optional)
		 * @param    $default (optional)
		 * @param    $firstMatch (optional)
		 */
		public function getServer($index = null, $default = null, $firstMatch = false)		{			if (is_null($index)) {				return $this->getParams('server');			} else if (is_array($index)) {				$values = array();				foreach ($index as $key => $spec) {					if (is_int($key)) {						$key = strtoupper(str_replace(array('-', '.', '::'), '_', $spec));						$spec = $default;					} else {						$key = strtoupper(str_replace(array('-', '.', '::'), '_', $key));					}					$value = $this->getServer($key, $spec);					if ($firstMatch) {						if ($value !== $default) {							array_shift($index);							return $value;						} else {							if (count($index) == 0) {								return $default;							}						}					}					$values[$key] = $value;				}				return $values;			} else {				$index = strtoupper(str_replace(array('-', '.', '::'), '_', $index));				$value = $this->getParam($index, 'server');				return empty($value) ? $default : $value;			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (optional)
		 * @param    $default (optional)
		 */
		public function getCookie($index = null, $default = null)		{				if (is_null($index)) {					return $this->getParams('cookie');				} else {					$value = $this->getParam($index, 'cookie');					return empty($value) ? $default : $value;				}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $namespace (optional)
		 */
		public function isPost($namespace = null)		{			$return = null;			if (!empty($namespace)) {				if (is_array($namespace)) {					foreach ($namespace as $name) {						if ($return === false) {							return false;						} else {							$return = $this->isPost($name);						}					}					return true;				} else {					return $this->getPost($namespace, false) === false ? false : true;				}			} else {				return ($this->getMethodName() == 'POST');			}		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $mime (required)
		 */
		public function isAcceptedMime($mime)		{			$mimes = $this->getAcceptedMimes();			return in_array($mime, $mimes);		}		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getAcceptedMimes()		{			if (!empty($this->acceptedMimes)) {				return $this->acceptedMimes;			}			$acceptable = $this->getServer('HTTP_ACCEPT');			if (empty($acceptable)) {				return array();			} else {				$values = array();				foreach (array_filter(explode(',', $accetable)) as $value) {					// Cut off any q-value that might come after a semi-colon					if ($pos = strpos($value, ';')) {						$q     = (float) trim(substr($value, $pos + 3));						$value = trim(substr($value, 0, $pos));					} else {						$q = 1;					}					$values[$value] = $q;				}				arsort($values);		    	$this->acceptedMimes = array_keys($values);			}			return $this->acceptedMimes;		}	}?>