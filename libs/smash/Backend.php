<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @package     Backend
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Backend
	{
		const STATUS_AUTHORIZED             = 1;
		const STATUS_DENIED                 = 0;
		const STATUS_IDENTITY_MANIPULATED   = -1;
		const STATUS_IP_MANIPULATED         = -2;
		const STATUS_USER_AGENT_MANIPULATED = -3;
		const STATUS_IDENTITY_NOT_FOUND     = -4;
		const STATUS_IDENTITY_NOT_EXCLUSIVE = -5;
		const STATUS_CREDENTIAL_INVALID     = -6;

		private $status  = self::STATUS_DENIED;
		private $model   = null;
		private $storage = null;
		private $crypto  = null;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (required)
		 * @param    $crypto (optional)
		 */
		public function __construct($model, $crypto = null)
		{
			$this->setModel($model);

			if (!empty($crypto)) {
				$this->setCrypto($crypto);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (required)
		 */
		public function setModel($model)
		{
			if ($model instanceof Backend\Model\Surface) {
				$this->model = $model;
			} else {
				throw Core::error('class.not-instanceof', array($model, 'Smash\\Backend\\Model\\Surface'));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getModel()
		{
			if ($this->model instanceof Backend\Model\Surface) {
				return $this->model;
			} else {
				throw Core::error('You must supply a model first');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $storage (required)
		 */
		public function setStorage($storage)
		{
			if ($storage instanceof Storage\Surface) {
				$this->storage = $storage;
			} else {
				throw Core::error('class.not-instanceof', array($storage, 'Smash\\Storage\\Surface'));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getStorage()
		{
			if (!$this->storage instanceof Storage\Surface) {
				$storage = Library::factory('storage.session');
				$this->setStorage($storage);
			}

			return $this->storage;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function hasCrypto()
		{
			return $this->crypto instanceof Backend\Crypto;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $module (required)
		 * @param    $key (optional)
		 * @param    $options (Array)
		 */
		public function setCrypto($module, $key = null, array $options = array())
		{
			$crypto = Library::factory('backend.crypto', $key, $options);
			$crypto->loadModule($module);

			$this->crypto = $crypto;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $key (optional)
		 * @param    $options (Array)
		 */
		public function getCrypto($key = null, array $options = array())
		{
			if (!$this->crypto instanceof Backend\Crypto) {
				$this->crypto = Library::factory('backend.crypto', $key, $options);
			}

			return $this->crypto;
		}

		// TODO maybe implements max attempts, not sure if its neccessary
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $attempts (required)
		 */
		public function setMaxAttempts($attempts)
		{
			if (is_int($attempts) && $attempts > 0) {
				$this->write('backend_max_attempts', $attempts);
			} else {
				throw Core::error('Backend max attempt limit has to be an integer and over zero value');
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $request (optional)
		 */
		public function verify($request = null)
		{
			$storage = $this->getStorage();

			if (!$storage->isActive()) {
				$this->status = self::STATUS_DENIED;
			}

			$identity = $this->read('backend_identity');
			$ip       = $this->read('backend_ip');
			$agent    = $this->read('backend_useragent');

			if (!$this->getModel()->verify($identity)) {
				$this->status = self::STATUS_IDENTITY_MANIPULATED;
			} else {
				if ($request instanceof Mvc\Controller\Request) {
					if ($ip != $request->getIP()) {
						$this->status = self::STATUS_IP_MANIPULATED;
					} else if ($agent != $request->getServer('HTTP_USER_AGENT')) {
							$this->status = self::STATUS_USER_AGENT_MANIPULATED;
					}
				}

				$storage->renewID();
				$this->status = self::STATUS_AUTHORIZED;
			}

			if ($this->status > 0) {
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $identity (required)
		 * @param    $credential (required)
		 * @param    $request (optional)
		 */
		public function identify($identity, $credential, $request = null)
		{
			// $this->setFingerprint('identity',   $identity);
			// $this->setFingerprint('credential', $credential);

			$this->status = $this->getModel()->identify($identity, $credential);

			if ($this->status > 0) {
				$this->clearIdentity();

				if ($request instanceof Mvc\Controller\Request) {
					$this->write('backend_useragent', $request->getServer('HTTP_USER_AGENT'));
					$this->write('backend_ip',        $request->getIP());
				}

				$this->getStorage()->renewID();
				$this->write('backend_identity', $identity);
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function read($index)
		{
			$storage = $this->getStorage();
			$data    = $storage->read($index);

			if ($this->hasCrypto()) {
				return $this->crypto->crypt($data, 'decrypt');
			} else {
				return $data;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $data (required)
		 */
		public function write($index, $data)
		{
			$storage = $this->getStorage();

			if ($this->hasCrypto()) {
				$data = $this->crypto->crypt($data, 'encrypt');
			}

			$storage->write($index, $data);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getStatus()
		{
			return $this->status;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getIdentity()
		{
			return $this->read('backend_identity');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clearIdentity()
		{
			return $this->getStorage()->clear();
		}
	}
?>