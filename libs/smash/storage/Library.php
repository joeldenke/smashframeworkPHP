<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Storage;
	
	use	Smash\Core,
		Smash\Error;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Storage
	 * @uses         Smash\Core,  Smash\Error
	 * @extends      ArrayObject
	 * @interfaces   Countable, Serializable, ArrayAccess, Traversable, IteratorAggregate
	 * @package      Library
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Library extends \ArrayObject implements \Serializable
	{
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $record (Array)
		 */
		public function __construct(array $record = array())
		{
			parent::__construct($record);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $class (required)
		 * @param    $autoload (optional)
		 */
		static public function isDeclared($class, $autoload = false)
		{
			return (class_exists($class, $autoload) || interface_exists($class, $autoload));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $section (required)
		 * @param    $value (required)
		 * @param    $strict (optional)
		 */
		public function store($section, $value, $strict = true)
		{
			if ($this->offsetExists($section)) {
				if ($strict === true) {
					throw Core::error('A record in section "%section" already exists', array('section' => $section));
				} else {
					return false;
				}
			} else {
				$this->offsetSet($section, $value);
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $library (required)
		 */
		public function storeAll($library)
		{
			if (is_array($library)) {
				$store = $library;
			} else if ($library instanceof Library) {
				$store = $library->asArray();
			} else {
				$store = array();
			}

			foreach ($store as $section => $object) {
				if (is_array($object) || ($object instanceof Library)) {
					$this->storeAll($object);
				} else {
					$this->store($section, $object, false);
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $section (required)
		 * @param    $default (optional)
		 */
		public function fetch($section, $default = false)
		{
			if ($this->offsetExists($section)) {
				return $this->offsetGet($section);
			} else {
				return $default;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $section (required)
		 */
		public function remove($section)
		{
			if ($this->offsetExists($section)) {
				$this->offsetUnset($section);
			} else {
				throw Core::error('Section "%section" in library does not exist"', array('section' => $section));
			}

			return $this;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $library (required)
		 */
		public function clearLibrary($library)
		{
			$this->__construct($library);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $section (required)
		 */
		public function exists($section)
		{
			$instance = clone $this;

			// Deep inheritance dependecy check
			if (is_array($section)) {
				do {
					$part  = array_shift($section);
					$check = $instance->offsetExists($part);

					if (!is_string($part)) {
						throw Core::error('All parts in the array has to be string resources', array('part' => $part));
					}

					if ($check === true) {
						if (count($section)) {
							if (!$instance->getOffset($part) instanceof Library) {
								return false;
							} else {
								$instance = $instance->offsetGet($part);
							}
						} else {
							return true;
						}
					} else {
						return false;
					}
				} while (count($section));
			} else {
				return $instance->offsetExists($section);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function countSections()
		{
			return $this->count();
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function asArray()
		{
			$iterator = $this->getIterator();
			return iterator_to_array($iterator);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function serialize()
		{
			return serialize($this);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $serialized (required)
		 */
		public function unserialize($serialized)
		{
			$record = unserialize($serialized);

			if ($record instanceof Library) {
				return $record;
			} else {
				throw Core::error('The unserialized string does not appear to be a valid Smash\\Storage\\Library', array('library' => $library));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $library (optional)
		 * @param    $deep (optional)
		 */
		public function printLibrary($library = null, $deep = 0)
		{
			if (is_array($library)) {
				$collection = $library;
			} else if ($record instanceof Library) {
				$collection = $library->asArray();
			} else {
				$collection = $this->asArray();
			}

			foreach ($collection as $section => $data) {
				if (is_array($data)) {
					echo str_repeat('&nbsp', $deep*8) . '['. $section .'] => array(<br />'. Core::CRLF;
					$this->printRecord($data, $deep+1);
					echo str_repeat('&nbsp', $deep*8) .')<br />'. Core::CRLF;
				} else {
					if (is_object($data)) {
						$data = get_class($data) . ' Object';
					}

					echo str_repeat('&nbsp', $deep*8) . '['. $section .']' .' => '. $data . '<br />' . Core::CRLF;
				}
			}
		}
	}
?>