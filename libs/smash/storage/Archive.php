<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Storage;

	use	Smash\Core,
		Smash\Inflector,
		Smash\Library as Lib;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Storage
	 * @uses        Smash\Core,  Smash\Inflector,  Smash\Library as Lib
	 * @package     Archive
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Archive
	{
		const ARCHIVE_NONE = 'none';
		const ARCHIVE_TAR    = 'tar';
		const ARCHIVE_ZIP    = 'zip';
		const ARCHIVE_RAR    = 'rar';
		const ARCHIVE_ZLIB   = 'zlib';

		private $archive;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $archive (required)
		 * @param    $name (required)
		 * @param    $mode (optional)
		 */
		public function __construct($archive, $name, $mode = false)
		{
			if ($archive !== self::ARCHIVE_NONE) {
				if (is_readable(dirname(__FILE__) . Inflector::classyfile('-archive-'. $archive))) {
					$this->archive = Lib::factory('archive.'. $archive, $name, $mode);
				} else {
					throw Core::error('archive.invalid-compression-archive', array('archive' => $archive));
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $entry (required)
		 * @param    $content (optional)
		 */
		public function addEntry($entry, $content = null)
		{
			if (is_dir($entry)) {
				$this->addFolder($entry);
			} else {
				$this->getArchive()->addSimple($entry);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $folder (required)
		 */
		public function addFolder($folder)
		{
			$base   = null;
			$folder = substr($folder, -1) == Core::DS ? substr($folder, 0, strlen($folder) - 1) : $folder;

			if (strstr($folder, Core::DS)) {
				$base  = substr($folder, 0, strrpos($folder, Core::DS) + 1);
				$folder = substr($folder, strrpos($folder, Core::DS) + 1);
			}

			$this->getArchive()->addFolder($base, $folder);
		}
	}
?>