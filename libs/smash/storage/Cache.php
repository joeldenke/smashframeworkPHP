<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Storage;
	
	use Smash\Storage\Cache\Server\Surface as Server,
		Smash\Storage\Cache\Model\Surface as Model,
		Smash\Inflector,
		Smash\Library,
		Smash\Core,
		Smash\Error;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash\Storage
	 * @uses        Smash\Storage\Cache\Server\Surface as Server,  Smash\Storage\Cache\Model\Surface as Model,  Smash\Inflector,  Smash\Library,  Smash\Core,  Smash\Error
	 * @package     Cache
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Cache
	{
		protected $model;
		protected $server;
		protected $config;
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $model (required)
		 * @param    $config (optional)
		 */
		public function __construct($name, $model, $config = array())
		{
			if ($config instanceof Config) {
				$this->config = $config;
			} else if (is_array($config)) {
				$this->config = Library::factory('storage.config', $config);
			} else if (is_readable($config)) {
				$hydrator = Library::factory('storage.config.hydrator', array('addAttributes' => false, 'skipRoot' => true));
				$this->config = $hydrator->read($config);
			} else {
				throw Core::error('config.data-invalid', array('data' => $config), Error::CODE_CORE);
			}
			
			$this->server = $this->getServer($name, $model, $this->config);
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $model (required)
		 * @param    $options (required)
		 */
		public function getServer($name, $model, $options)
		{
			if ($this->server instanceof Server) {
				return $this->server;
			} else if (is_readable(dirname(__FILE__) . Inflector::classyfile('-cache-server-'. $name))) {
				return Library::factory('storage.cache.server.'.$name, $this->getModel($model, $options), $options);
			} else {
				throw Core::error('storage.cache.invalid-server', array('server' => $name));
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $model (required)
		 * @param    $options (required)
		 */
		public function getModel($model, $options)
		{
			if ($this->model instanceof Model) {
				return $this->model;
			} else if (is_readable(dirname(__FILE__) . Inflector::classyfile('-cache-model-'. $model))) {
				$this->model = Library::factory('storage.cache.model.'.$model, $options);
			} else {
				$this->model = Library::factory('storage.cache.model.data', $options);
			}
			
			return $this->model;
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $method (required)
		 * @param    $params (Array, required)
		 */
		public function __call($method, array $params)
		{
			return call_user_func_array(array($this->server, $method), $params);
		}
	}
?>