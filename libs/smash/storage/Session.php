<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash\Storage;
	use   Smash\Core,
		Smash\Error;

	/**
	 * Description goes here ...
	 * 
	 * @namespace    Smash\Storage
	 * @uses         Smash\Core,  Smash\Error
	 * @interfaces   Smash\Storage\Surface
	 * @package      Session
	 * @author       Joel Denke <mail@happyness.se>
	 * @license      http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Session implements Surface
	{
		private $options = array(
			'overwrite'    => true,
			'autogenerate' => false
		);

		protected $namespace = '__SmAsH__SeSSION__NameSpace__';
		protected $sessionStarted = false;

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $namespace (optional)
		 * @param    $options (Array)
		 */
		public function __construct($namespace = null, array $options = array())
		{
			if (!empty($namespace)) {
				$this->namespace = $namespace;
			}

			if (!empty($options)) {
				$this->setOptions($options);
			}

			$this->start();
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $options (Array, required)
		 */
		public function setOptions(array $options)
		{
			foreach ($options as $key => $value) {
				if (array_key_exists($key, $this->options)) {
					$this->options[$key] = $value;
				} else {
					continue;
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function getOptions()
		{
			return $this->options;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $option (required)
		 */
		public function getOption($option)
		{
			if (array_key_exists($option, $this->options)) {
				return $this->options[$option];
			} else {
				throw Core::error('Option does not exist: %options', array('option' => $option));
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   private
		 * @param    $method (required)
		 */
		private function checkHeaders($method)
		{
			if (headers_sent($file, $line)) {
				throw Core::error(
					'You must call %class::%method() before any output has been sent to the browser; output started in {%file}/{%line}',
					array('class' => __CLASS__, 'method' => $method, 'file' => $file, 'line' => $line), Error::CODE_CORE
				);
			} else {
				return true;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function isActive()
		{
			if (isset($_SESSION)) {
				return true;
			} else {
				return false;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function start()
		{
			$this->checkHeaders(__FUNCTION__);

			if (!$this->isActive()) {
				@session_start();
				$this->sessionStarted = true;
			}

			return true;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function clear()
		{
			$this->start();
			unset($_SESSION);
			session_destroy();
			$this->sessionStarted = false;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function renewID()
		{
			if ($this->start()) {
				session_regenerate_id(true);
			// self::$_regenerateIdState = 1;
			} else {
			// self::$_regenerateIdState = -1;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $value (required)
		 */
		public function write($index, $value)
		{
			if ($this->start()) {
				if ($this->getOption('overwrite')) {
					$_SESSION[$this->namespace . $index] = $value;
				} else {
					if (!$this->exist($index, $this->namespace)) {
						$_SESSION[$this->namespace . $index] = $value;
					} else {
						throw Core::error('You are not allowed to overwrite session namespaces', null, Error::CODE_CORE);
					}
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 */
		public function read($index)
		{
			if ($this->start()) {
				if ($this->exist($index, $this->namespace)) {
					return $_SESSION[$this->namespace . $index];
				}
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 * @param    $value (required)
		 */
		public function __set($name, $value)
		{
			$this->write($name, $value);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $name (required)
		 */
		public function __get($name)
		{
			return $this->read($name);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 * @param    $index (required)
		 * @param    $namespace (optional)
		 */
		public function exist($index, $namespace = null)
		{
			if ($this->start()) {
				if (isset($_SESSION[$namespace . $index])) {
					return true;
				} else {
					return false;
				}
			}
		}
	}
?>