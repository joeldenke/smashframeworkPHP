<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @package     Profile
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Profile
	{
		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $profile (Smash\Profile Object, required)
		 */
		static public function setProfile(Profile $profile)
		{
			self::$profile = $profile;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 */
		static public function getProfile()
		{
			self::import('profile', 'smash');
			self::setOption('notify', true);

			if (!self::$profile instanceof Profile) {
				self::$profile = Library::factory('profile');
			}

			return self::$profile;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $class (required)
		 * @param    $message (optional)
		 * @param    $priority (optional)
		 */
		static public function notify($class, $message = null, $priority = null)
		{
			$profile = self::getProfile();

			if ($profile instanceof Profile) {
				if ($class instanceof \Exception) {
					$message  = $class->getMessage();
					$priority = Error::getLevel($class->getCode());
				}

				$profile->notify($class, $message, $priority);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $name (required)
		 * @param    $options (Array, required)
		 */
		static public function attachProfile($name, array $options)
		{
			$profile = self::getProfile();

			if (array_key_exists('obsclass', $options)) {
				if (get_class($obs) !== $options['obsclass']) {
					if (array_key_exists('obsparams', $options)) {
						$new = Library::factoryByParams($options['obsclass'], $options['obsparams']);
					} else {
						$new = Library::factory($options['obsclass']);
					}

					if ($new instanceof Profile) {
						$new->attach($name, $options);
						self::$profile = $new;
					} else {
						$profile->attach($name, $options);
					}
				}
			} else {
				$profile->attach($name, $options);
			}
		}
	}
?>