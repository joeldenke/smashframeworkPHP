<?php
/**
 * 
 * Generated by
 * Smash Framework Commentator
 * with PHP Version 5.3.4
 * 
 *  DESCRIPTION
 * Smash Framework is a Open Source PHP web framework to make it easier, efficient and more fun to create web applications.
 * 
 *  LICENSE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author      Joel Denke <mail@happyness.se>
 * @category    Smash - Smash Makes A Sweet Harmony
 * @copyright   (C) 2011 Joel Denke
 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
 * @version     alpha 0.1
 */
	namespace Smash;

	/**
	 * Description goes here ...
	 * 
	 * @namespace   Smash
	 * @package     Core
	 * @author      Joel Denke <mail@happyness.se>
	 * @license     http://www.opensource.org/licenses/gpl-3.0.html - GNU General Public License version 3
	 */
	class Core
	{
		const CRLF  = PHP_EOL;
		const DS    = DIRECTORY_SEPARATOR;
		const PHP   = '5.3.0';
		const CORE  = 'alpha 0.1';

		public  static $currentModule;
		public  static $base;
		public  static $root;
		public  static $libs;
		public  static $apps;
		private static $modules = array();

		/**
		 * Description goes here ...
		 * 
		 * @access   public
		 */
		public function __construct()
		{
			self::$base = dirname(__FILE__)    . self::DS;
			self::$libs = dirname(self::$base) . self::DS;
			self::$root = dirname(self::$libs) . self::DS;
			self::$apps = dirname(self::$libs) . self::DS .'apps'. self::DS;

			require_once(self::$base . 'Library.php');
			require_once(self::$base . 'Error.php');
			
			Library::register();
			
			Library::addNamespaces('Smash', self::$libs);
			Library::addNamespaces(self::$libs .'vendor');
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $path (required)
		 */
		static public function cleanPath($path)
		{
			$path = str_replace(array('\\', '/'), self::DS, $path);
			return rtrim($path, '\\/') . self::DS;
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $callback (required)
		 * @param    $params (Array)
		 */
		static public function profile($callback, array $params = array())
		{
			if (is_callable($callback)) {
				call_user_func_array($callback, $params);
			}
			// @TODO - post- and preprocessing notifications to all profiles attached.
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $name (required)
		 * @param    $config (required)
		 * @param    $load (optional)
		 */
		static public function connect($name, $config, $load = true)
		{
			if (!self::isModule($name)) {
				self::$modules[$name] = Library::factory('module', $name, $config);

				if ($load) {
					self::$currentModule = $name;
					self::profile(array(self::$modules[$name], 'run'));
				}
			} else {
				throw self::error('smash.module-already-exists', array('name' => $name), Error::CODE_CORE);
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $name (required)
		 */
		static public function runModule($name)
		{
			$module = self::getModule($name);
			self::$currentModule = $name;
			self::profile(array($module, 'run'));
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $name (required)
		 */
		static public function isModule($name)
		{
			return array_key_exists($name, self::$modules);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $name (optional)
		 */
		static public function getModule($name = null)
		{
			if (!empty($name)) {
				if (self::isModule($name)) {
					return self::$modules[$name];
				} else {
					throw self::error('smash.module-not-found', array('module' => $name), Error::CODE_CORE);
				}
			} else {
				return self::$modules;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, private, static
		 * @param    $file (required)
		 * @param    $module (required)
		 * @param    $filter (Array, required)
		 */
		final static private function filterConfigFile($file, $module, array $filter)
		{
			if (is_readable($file)) {
				return $file;
			} else {
				$parts = explode('/', $file);
				$last  = array_pop($parts);

				foreach ($parts as $key => $part) {
					if (substr($part, 0, 1) === '%') {
						$name = substr($part, 1);

						if (isset($filter[$name])) {
							$parts[$key] = self::cleanPath($filter[$name]);
						}
					}
				}

				$file = implode($parts) . $last;

				if (!is_readable($file)) {
					$file = implode($parts) . $module . self::DS .'config'. self::DS . $last;
				}

				return $file;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $mode (required)
		 */
		static public function isMode($mode)
		{
			switch ($mode) {
				case 'development' :
				case 'production'  :
					return (self::get('environment', false) === $mode);
					break;
				default :
					return false;
					break;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $option (required)
		 * @param    $default (optional)
		 */
		static public function get($option, $default = null)
		{
			if (self::isModule(self::$currentModule)) {
				$module = self::getModule(self::$currentModule);
				return $module->getOption($option);
			} else {
				return $default;
			}
		}
		
		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $path (required)
		 * @param    $default (optional)
		 */
		static public function getPath($path, $default = null)
		{
			if (self::isModule(self::$currentModule)) {
				$module = self::getModule(self::$currentModule);
				return $module->getOption($option);
			} else {
				return $default;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   public, static
		 * @param    $key (required)
		 * @param    $data (Array)
		 */
		static public function locale($key, array $data = array())
		{
			if (strpos($key, '.') === false) {
				return $key;
			} else {
				$keys   = explode('.', strtolower($key));
				$locale = array_pop($keys);
				$lang   = self::get('language', 'en_US');
				$file   = self::$base .'i18n'. self::DS . $lang . self::DS . implode(self::DS, $keys) .'.php';

				if (Storage\Filestream::exists($file)) {
					$messages = include $file;

					if (is_array($messages)) {
						if (isset($messages[$locale])) {
							return Error::filterMessage($messages[$locale], $data);
						}
					}
				}

				return $key;
			}
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, public, static
		 * @param    $message (required)
		 * @param    $data (optional)
		 * @param    $code (optional)
		 * @param    $options (optional)
		 */
		final static public function error($message, $data = null, $code = 0, $options = null)
		{
			return new Error($message, $data, $code, $options);
		}

		/**
		 * Description goes here ...
		 * 
		 * @access   final, public, static
		 */
		final static public function getVersion()
		{
			return self::CORE;
		}
    }
?>